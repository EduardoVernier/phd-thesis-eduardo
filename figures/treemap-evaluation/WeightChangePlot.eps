%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: WeightChangePlot.eps
%%Creator: Adobe Illustrator(R) 15.1
%%For: Alexandru Telea
%%CreationDate: 04/12/2019
%%BoundingBox: 0 0 619 460
%%HiResBoundingBox: 0 0 619 460
%%CropBox: 0 0 619 460
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 15.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 15.1.0 x39 R agm 4.5189 ct 5.1875%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.0-c060 61.134777, 2010/02/12-17:32:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2019-12-04T13:04:25+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS5.1</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>192</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAwAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qtmj9WF4+TJzUrzQ0&#xA;ZailVPYjFXkui/lL5m078vfMHlJ5rCf9OWEtn6heURRSwaVbabZzBDEd5WtjNMeqkjjypXFXqCpL&#xA;ZaOEqDLbW4HIdOUaUr94xVLtd82eXtBmt4NY1eKyluf7lJKVIrTkaA8Vr+0dsVRv6StDqcemC8rf&#xA;S27XccQSoMCOqF+YHD7TrtWuKov05v8Afx/4Ff6Yq705v9/H/gV/piqAm1mygs7O8uLmWCG+lhgt&#xA;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&#xA;7FXYq7FXYq7FX//Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2019-12-04T13:04:27+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2019-12-04T13:04:27+01:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>cairo 1.16.0 (https://cairographics.org)</pdf:Producer>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>218.171696</stDim:w>
            <stDim:h>162.116203</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>Arial-BoldMT</stFnt:fontName>
                  <stFnt:fontFamily>Arial</stFnt:fontFamily>
                  <stFnt:fontFace>Bold</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.06</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial Bold.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>ArialNarrow</stFnt:fontName>
                  <stFnt:fontFamily>Arial Narrow</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.38.1x</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>Arial Narrow.ttf</stFnt:fontFileName>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>LMSans10-Regular</stFnt:fontName>
                  <stFnt:fontFamily>LMSans10 Regular</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Unknown</stFnt:fontType>
                  <stFnt:versionString>Version 2.062;PS 2.000;hotconv 1.0.57;makeotf.lib2.0.21895</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:A74EFC2D71256811822ADE8A1794695D</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:A74EFC2D71256811822ADE8A1794695D</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:A74EFC2D71256811822ADE8A1794695D</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:A74EFC2D71256811822ADE8A1794695D</stEvt:instanceID>
                  <stEvt:when>2019-12-04T13:04:27+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS5.1</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -460 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 460 li
619 460 li
619 0 li
cp
clp
[1 0 0 1 0 0 ]ct
2.0467 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
76 397.793 mo
615.211 397.793 li
76 319.724 mo
615.211 319.724 li
76 241.449 mo
615.211 241.449 li
76 163.512 mo
615.211 163.512 li
76 85.2422 mo
615.211 85.2422 li
76 7.17236 mo
615.211 7.17236 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.85098 .85098 .85098 rgb
@
.68225 lw
183.871 7.17236 mo
183.871 397.793 li
291.609 7.17236 mo
291.609 397.793 li
399.68 7.17236 mo
399.68 397.793 li
507.418 7.17236 mo
507.418 397.793 li
615.211 7.17236 mo
615.211 397.793 li
@
2.0467 lw
76 397.793 mo
76 7.17236 li
.74902 .74902 .74902 rgb
@
4.0935 lw
1 lc
438.301 188.02 mo
444.398 110.781 li
440.609 87.6333 li
.129412 .443137 .709804 rgb
@
445.199 188.141 mo
445.199 191.941 442.121 195.02 438.32 195.02 cv
434.52 195.02 431.441 191.941 431.441 188.141 cv
431.441 184.34 434.52 181.262 438.32 181.262 cv
442.121 181.262 445.199 184.34 445.199 188.141 cv
cp
f
444.211 102.602 mo
452.398 118.973 li
436.031 118.973 li
444.211 102.602 li
cp
f
433.73 80.6563 mo
447.484 80.6563 li
447.484 94.4102 li
433.73 94.4102 li
433.73 80.6563 li
cp
f
341.379 296.742 mo
348.48 245.383 li
339.371 228.293 li
.258824 .690196 .32549 rgb
@
348.258 296.859 mo
348.258 300.66 345.18 303.742 341.379 303.742 cv
337.59 303.742 334.508 300.66 334.508 296.859 cv
334.508 293.063 337.59 289.992 341.379 289.992 cv
345.18 289.992 348.258 293.063 348.258 296.859 cv
cp
f
348.258 237.191 mo
356.449 253.57 li
340.07 253.57 li
348.258 237.191 li
cp
f
332.219 221.148 mo
345.973 221.148 li
345.973 234.902 li
332.219 234.902 li
332.219 221.148 li
cp
f
338.758 308.422 mo
346.59 260.121 li
336.84 239.25 li
.435294 .768627 .368627 rgb
@
345.641 308.652 mo
345.641 312.449 342.559 315.531 338.77 315.531 cv
334.969 315.531 331.891 312.449 331.891 308.652 cv
331.891 304.853 334.969 301.771 338.77 301.771 cv
342.559 301.771 345.641 304.853 345.641 308.652 cv
cp
f
346.301 251.603 mo
354.48 267.974 li
338.109 267.974 li
346.301 251.603 li
cp
f
329.918 232.277 mo
343.672 232.277 li
343.672 246.031 li
329.918 246.031 li
329.918 232.277 li
cp
f
315.98 286.371 mo
313.219 198.551 li
304.059 145.141 li
.615686 .85098 .52549 rgb
@
322.719 286.383 mo
322.719 290.181 319.641 293.263 315.84 293.263 cv
312.039 293.263 308.961 290.181 308.961 286.383 cv
308.961 282.59 312.039 279.513 315.84 279.513 cv
319.641 279.513 322.719 282.59 322.719 286.383 cv
cp
f
313.219 190.359 mo
321.41 206.742 li
305.031 206.742 li
313.219 190.359 li
cp
f
297.18 137.969 mo
310.934 137.969 li
310.934 151.723 li
297.18 151.723 li
297.18 137.969 li
cp
f
388.84 378.859 mo
353.5 375.492 li
314.809 378.332 li
.737255 .741176 .862745 rgb
@
395.75 379.063 mo
395.75 382.859 392.668 385.941 388.871 385.941 cv
385.07 385.941 381.988 382.859 381.988 379.063 cv
381.988 375.263 385.07 372.181 388.871 372.181 cv
392.668 372.181 395.75 375.263 395.75 379.063 cv
cp
f
353.5 368.513 mo
360.379 382.263 li
346.621 382.263 li
353.5 368.513 li
cp
f
307.648 371.457 mo
321.402 371.457 li
321.402 385.211 li
307.648 385.211 li
307.648 371.457 li
cp
f
394.559 374.84 mo
377.078 372.109 li
345.621 361.902 li
.501961 .490196 .729412 rgb
@
401.309 374.801 mo
401.309 378.603 398.23 381.681 394.441 381.681 cv
390.641 381.681 387.559 378.603 387.559 374.801 cv
387.559 371 390.641 367.931 394.441 367.931 cv
398.23 367.931 401.309 371 401.309 374.801 cv
cp
f
376.75 363.931 mo
384.941 380.301 li
368.57 380.301 li
376.75 363.931 li
cp
f
338.441 354.758 mo
352.195 354.758 li
352.195 368.513 li
338.441 368.513 li
338.441 354.758 li
cp
f
375.98 379.301 mo
357.758 378.332 li
321.98 374.051 li
.619608 .603922 .784314 rgb
@
382.969 379.392 mo
382.969 383.191 379.898 386.263 376.102 386.263 cv
372.301 386.263 369.219 383.191 369.219 379.392 cv
369.219 375.59 372.301 372.513 376.102 372.513 cv
379.898 372.513 382.969 375.59 382.969 379.392 cv
cp
f
357.43 370.152 mo
365.621 386.521 li
349.238 386.521 li
357.43 370.152 li
cp
f
314.859 366.879 mo
328.613 366.879 li
328.613 380.633 li
314.859 380.633 li
314.859 366.879 li
cp
f
359.398 291.16 mo
360.699 247.34 li
344.32 237.633 li
.619608 .282353 .054902 rgb
@
366.27 291.301 mo
366.27 295.09 363.191 298.172 359.398 298.172 cv
355.602 298.172 352.52 295.09 352.52 291.301 cv
352.52 287.5 355.602 284.422 359.398 284.422 cv
363.191 284.422 366.27 287.5 366.27 291.301 cv
cp
.65098 .211765 .0117647 rgb
f
360.379 239.16 mo
368.57 255.531 li
352.191 255.531 li
360.379 239.16 li
cp
f
337.129 230.648 mo
350.883 230.648 li
350.883 244.402 li
337.129 244.402 li
337.129 230.648 li
cp
f
354.48 213.211 mo
357.52 153.359 li
348.59 98.9805 li
.945098 .411765 .0745098 rgb
@
354.16 204.77 mo
362.34 221.152 li
345.969 221.152 li
354.16 204.77 li
cp
f
357.43 145.172 mo
365.621 161.543 li
349.238 161.543 li
357.43 145.172 li
cp
f
341.711 91.7974 mo
355.465 91.7974 li
355.465 105.551 li
341.711 105.551 li
341.711 91.7974 li
cp
f
395.211 274.82 mo
392.469 218.531 li
380.191 182.84 li
.839216 .411765 .0745098 rgb
@
401.969 274.922 mo
401.969 278.724 398.891 281.801 395.09 281.801 cv
391.289 281.801 388.211 278.724 388.211 274.922 cv
388.211 271.121 391.289 268.043 395.09 268.043 cv
398.891 268.043 401.969 271.121 401.969 274.922 cv
cp
f
392.469 210.34 mo
400.66 226.711 li
384.281 226.711 li
392.469 210.34 li
cp
f
373.148 175.957 mo
386.902 175.957 li
386.902 189.711 li
373.148 189.711 li
373.148 175.957 li
cp
f
403.281 265.013 mo
407.289 208.051 li
398.18 177.492 li
.992157 .815686 .635294 rgb
@
410.16 265.103 mo
410.16 268.902 407.078 271.974 403.281 271.974 cv
399.48 271.974 396.398 268.902 396.398 265.103 cv
396.398 261.301 399.48 258.224 403.281 258.224 cv
407.078 258.224 410.16 261.301 410.16 265.103 cv
cp
f
407.211 199.859 mo
415.391 216.23 li
399.02 216.23 li
407.211 199.859 li
cp
f
391.16 170.387 mo
404.914 170.387 li
404.914 184.141 li
391.16 184.141 li
391.16 170.387 li
cp
f
456.98 152.172 mo
468.281 63.3013 li
439.699 29.5 li
.443137 .717647 .854902 rgb
@
463.859 152.121 mo
463.859 155.922 460.781 158.992 456.98 158.992 cv
453.191 158.992 450.109 155.922 450.109 152.121 cv
450.109 148.32 453.191 145.242 456.98 145.242 cv
460.781 145.242 463.859 148.32 463.859 152.121 cv
cp
f
468.121 54.793 mo
476.309 71.1602 li
459.93 71.1602 li
468.121 54.793 li
cp
f
432.75 22.3672 mo
446.504 22.3672 li
446.504 36.1211 li
432.75 36.1211 li
432.75 22.3672 li
cp
f
401.52 274.359 mo
384.941 206.742 li
353.34 159.211 li
.964706 .701961 .117647 rgb
@
408.52 274.271 mo
408.52 278.063 405.441 281.142 401.641 281.142 cv
397.84 281.142 394.758 278.063 394.758 274.271 cv
394.758 270.474 397.84 267.392 401.641 267.392 cv
405.441 267.392 408.52 270.474 408.52 274.271 cv
cp
f
384.609 198.551 mo
392.801 214.922 li
376.418 214.922 li
384.609 198.551 li
cp
f
346.301 152.047 mo
360.055 152.047 li
360.055 165.801 li
346.301 165.801 li
346.301 152.047 li
cp
f
145.918 388.021 mo
154.07 385.543 li
162.23 385.5 li
.317647 .490196 .2 rgb
@
152.758 388.23 mo
152.758 392.031 149.68 395.109 145.879 395.109 cv
142.078 395.109 139 392.031 139 388.23 cv
139 384.431 142.078 381.353 145.879 381.353 cv
149.68 381.353 152.758 384.431 152.758 388.23 cv
cp
f
153.738 378.66 mo
160.621 392.422 li
146.859 392.422 li
153.738 378.66 li
cp
f
155.051 378.336 mo
168.805 378.336 li
168.805 392.09 li
155.051 392.09 li
155.051 378.336 li
cp
f
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /LMSans10-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 65 /A putdup 80 /P putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings3 dict dup begin/A <1C60D8A8C9B7D7E88499B0B4629F6223175CD4E8063229FBCC9F00B932F15865B21E5E7BB034E6AEB00B8493B7416EA5F21E0E31EA4A4AA7B249DD04C2020B54E2FE3571164F33157FAF89CB55ED12EC09CD04764D59017211B80D8BF81FE221E84A40> |-/P <1C60D8A8C9B7876E235FC614E63EC6DDBF5153E7285DD594B4A59D9CFED19B0A38B3CB0F4F897304E6BAD66C826BEE7E4169B0E7C80E2CF9471E5F92DE30A72B04AC0EEA14B3B5B59AE75C5D253EAF073DA7CF16B6D745CDF6FBBE2E5B43C2B5E88E6AFB64C1CBC51F> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular /LMSans10-Regular findfont ct_VMDictPut/SAYFYR+LMSans10-Regular*1 [65{/.notdef}rp /A 14{/.notdef}rp /P 175{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf409.29 74.1914 mo(A)sh421.303 74.1914 mo(P)sh431.758 74.1914 mo(P)shgrestore
2.0467 lw
0 lc
339.371 228.293 mo
331.051 214.941 li
.65098 .65098 .65098 rgb
@
gsave
225.789 186.941 mo
436.269 186.941 li
436.269 214.902 li
225.789 214.902 li
225.789 186.941 li
cp
clp
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/H <1C60D8A8C9B6415B1C8023DCDB0FF1D084A484AF3579A723AF8D5247ABB5D292AC378AF267DE95E8DC7174E8DD00326C723C8D6F70CCD88C857300A53452> |-/I <1C60D8A8C9B87DE005AD6F3C5D74814B2BFE06F81F462471EDB11E0EC39F39EA> |-/L <1C60D8A8C9B74383E5F6C6CDF9C5C9B986319F48E0C8F60D9DD3B951CB8A90C91D93DE> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 72 /H putdup 73 /I putdup 76 /L putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [65{/.notdef}rp /A 6{/.notdef}rp /H /I 2{/.notdef}rp /L 3{/.notdef}rp /P 175{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf316.08 208.901 mo(H)sh328.818 208.901 mo(I)sh333.507 208.901 mo(L)shgrestore
grestore
338.918 308.422 mo
315.27 308.422 li
@
gsave
130.629 294.34 mo
453.789 294.34 li
453.789 322.422 li
130.629 322.422 li
130.629 294.34 li
cp
clp
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B6D9EA19A14B847D0E8EB8BF4B471CD6F46D062EB4BE9876711DE846CB52CA29717591BA788944E909A85262E823C4FA12BA37712263FC72E989A6DED74E14903D34D6198FBDC555D5CFE2C4496EBCDE1C8C3752795BF188E4FAAED3EDACC0501E6038041D4A8B4E60EE57E2BABA6257E8> |-/O <1C60D8A8C9B624F9257693AA05F54B3F6F5707D5ED56A2F403B01AB2B44BFA61536ECB93C3E443D431CDA75F7C80E1651DDF58D3BF4622794EC6262BD68BAD06E68E1E6A6884DEBA5A70BE002DB0A3D53BEB04D3F8C5368D696AC6C0C562F74CC4E6C46ADC> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 77 /M putdup 79 /O putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [65{/.notdef}rp /A 6{/.notdef}rp /H /I 2{/.notdef}rp /L /M /.notdef /O /P 175{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf269.16 316.422 mo(M)sh284.841 316.422 mo(O)sh298.355 316.422 mo(O)shgrestore
grestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/S <1C60D8A8C9B7AED8035FF9728E9C78ACC28F20CC9666D445523C20D6BC6D45C854A0BE693CA04DDB35CE9C6FCC12699F3ECF3D1B67F9F5777A6EECDAF3C0F3F32C0B6BC38F752623DB2A9617BDB514ED25F1A310A0C42BE659A27D8F2C06C4BFA42A6084F73A353D30020A89B386DABBAAA17119B17F011D1BF8067CBFE17C2D6AE10C51C95BF00F09A50ED067AF> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 83 /S putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [65{/.notdef}rp /A 6{/.notdef}rp /H /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S 172{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf289.2 135.802 mo(S)sh298.806 135.802 mo(P)sh309.209 135.802 mo(I)shgrestore
314.809 378.431 mo
309.289 378.211 li
297 378.211 li
@
gsave
197.59 364.181 mo
371.59 364.181 li
371.59 392.263 li
197.59 392.263 li
197.59 364.181 li
cp
clp
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/G <1C60D8A8C9B67B1690716FF04D0147EA5B51F2B65610FAF2358C724A65CE4A5C15BD93B6E6EA59AFCC3415F16C5AEB5B662300673D7883DCA60663F28B1374AECADD3956841307F73A4A3284F6D8D8ABF9017548C3B89BDD9012EBEC97E391C348B649F9A4B9E9FBB9333C1B69DB13F722AB4C9DC35502510C64773DA8C4CCB3ABFBFDCCB6F676B3960993837C4B63CC7BA56876924A0E6E> |-/i <1C60D8A8C9B88055FF27B3934D040E8DA53B043AB8CFF68E8D519FEAB9D5A4874DC9B90E63751BC12355D9D8276E2A66CDDB9CE6DD75534C5A54C45E2D6E21C6C79BBDA40B7772F2DEC85ADAD3476B> |-/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E6402088837AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3D16C57> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 71 /G putdup 105 /i putdup 116 /t putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [65{/.notdef}rp /A 5{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S 21{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf272.21 386.241 mo(G)sh284.891 386.241 mo(it)[4.44238 0 ]xshgrestore
grestore
394.559 374.84 mo
401.641 375.133 li
413.988 375.133 li
@
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7BA8F425ECEAC1D5FB15843FC3AEF325D7DA4AC5B492181366F1B4D605798E0A37299E20A2C781E96943F501C8D283CF9274FA8718C41BB1F2F8D3022028ECD22D73F736D12B17047DF40EDD60B6519E74C55A33C> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [52{/.notdef}rp /four 12{/.notdef}rp /A 5{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S 21{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf422.47 383.142 mo(L)sh431.631 383.142 mo(M)sh447.351 383.142 mo(4)shgrestore
321.98 374.051 mo
316.668 358.043 li
@
gsave
184.871 329.98 mo
448.508 329.98 li
448.508 358.063 li
184.871 358.063 li
184.871 329.98 li
cp
clp
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC868BB2F3F35FB5E9F1C0F84AF60C7D8EABDB59B8E1F960151F9511E55A6B26091EC60E1C90C277465A6CD6BF415E99C1E3222E5D8229E07EB706E217942A6C6EE460AA0> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A 5{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S 21{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf297.89 352.042 mo(L)sh307.04 352.042 mo(M)sh322.739 352.042 mo(0)shgrestore
grestore
359.391 291.16 mo
363.98 303.41 li
376.41 303.41 li
@
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B79D2DDA73CBA562CCA616611FA2F6D9A4F73A34564160886E9CF893B5F30C6CA3CC5C829E6C86CCD8B6039E0C7F2FD0FFEC5790BDC97E18D50224F8DBF29BE62BF93B9B46A0E426252323AF779BE129778FBC2237B0172C862C48766856E64A95D30B6FDF49C5041364379F758936E5F343D201DDC5AF9E1CC2D12A5BB71D809FD0C76D483DCA8BBD4974D0EC93996621F2710B5158F156401628A148FF8FBE9DF1DF727E152C865F07> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B 4{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S 21{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf378.449 311.401 mo(P)sh388.903 311.401 mo(B)sh399.567 311.401 mo(M)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf328.17 86.0215 mo(P)sh338.624 86.0215 mo(B)sh349.288 86.0215 mo(S)shgrestore
380.191 182.84 mo
383.32 168.262 li
@
gsave
251.59 140.262 mo
515.11 140.262 li
515.11 168.223 li
251.59 168.223 li
251.59 140.262 li
cp
clp
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Z <1C60D8A8C9B7924C306AE211DC62993632BBB0EB035946DEA580F9525E4DE67D756B4FB8280DAE3F99D28FD65D9C7B7B15938F40BF5331> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 90 /Z putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B 4{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P 2{/.notdef}rp /S 6{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf364.56 162.201 mo(P)sh375.014 162.201 mo(B)sh385.678 162.201 mo(Z)shgrestore
grestore
407.289 208.199 mo
423.668 208.199 li
@
gsave
321.191 194.141 mo
560.23 194.141 li
560.23 222.223 li
321.191 222.223 li
321.191 194.141 li
cp
clp
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf423.739 216.172 mo(S)sh433.319 216.172 mo(P)sh443.717 216.172 mo(L)shgrestore
grestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Q <1C60D8A8C9B624F9257693AA05F54B3F6F5707D5ED56AC31B478319ABFF003701765F0E8CBF129BA3B31B241A6A02D406C1A3892D1D30D8BDF8B5F46E4693B42A6D33905BED936D149C2F37F3C10A9ECD9553A1894BC8CF6BF28317BEB3A292CFC084A1E00302D496E9DB8FACDD85C243CEFC3BF842C65DBF6F2B463A75C7F8C> |-/R <1C60D8A8C9B7818197CA8C10BDEF0792283B4AD60A4778EF579EA03A9938895E46A3DD671B55D56CE5AC1FF66AA5C5464B6272AB067D7AABFB9BA4824D96D968B50E7E75C15CA7D5303E4D6EB750FDAD2DAE18E237F2D0B786B8A46E9DCB053FB02CA78233BC22EC230776B8699564C207758BBC5B113141> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 81 /Q putdup 82 /R putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B 4{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P /Q /R /S 6{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf463.46 45.5811 mo(S)sh473.116 45.5811 mo(Q)sh486.555 45.5811 mo(R)shgrestore
401.52 274.359 mo
416.531 274.359 li
@
gsave
305.469 260.383 mo
564.668 260.383 li
564.668 288.34 li
305.469 288.34 li
305.469 260.383 li
cp
clp
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/T <1C60D8A8C9B7AA91799D50BEC147DC15659E7F5EC34F826A01358F7E6EB53E56E1831B0550D2FE4055F5> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 84 /T putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B 4{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /.notdef /O /P /Q /R /S /T 5{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf416.59 282.341 mo(S)sh426.246 282.341 mo(T)sh436.148 282.341 mo(R)shgrestore
grestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/D <1C60D8A8C9B64FADC8BE4593403BE5D574FAA91D24903C73A9847FBCFF2CCAE7B82F347344B6D75D9DA8CFD564A5192C31CC0F81E85BFE65DA0E98609881F08E27947C3AA06FD0D02C1BFBD8926D8C270B5E2950C4A34E562381A9DCE503FFFA3F4060AB2DBCCA9D5531B6> |-/N <1C60D8A8C9B647206730D8F66F8AC61925B6B1318E1FB010B62374917FD833E1AD6BC7D55692C9AE2F77E568D5881F8457D1A44289B0DB31B4E1DC1F3487A85D6C086A5A13FB7D7B66A3F61EF4969C1AE080F7AF6D145220EBF9A7BF4151121C2FA015E52FB7E43B5305D938D71B0B61429953BBCCA81012B7A0E4> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 68 /D putdup 78 /N putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 5{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [19.008 0 0 -19.008 0 0 ]msf129.33 369.241 mo(S)sh138.985 369.241 mo(N)sh151.721 369.241 mo(D)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf53.0098 403.591 mo(0)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/period <1C60D8A8C9B89DB76243241956147685E9D11B558168E06D18275E2338D279B9913C7A1D115D13271EAC> |-/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 46 /period putdup 50 /two putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four 12{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 5{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf27.9097 325.442 mo(0)sh37.9331 325.442 mo(.)sh42.1279 325.442 mo(0)sh52.1704 325.442 mo(2)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf27.9097 247.301 mo(0)sh37.9331 247.301 mo(.)sh42.1279 247.301 mo(0)sh52.1704 247.301 mo(4)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/six <1C60D8A8C9B7BA8F6239473257A8A6F62043E414325CA26487C2B24B191B168E0DA687FF84130E464A581CEABD7A1831A83A01C968043ECE2E73D7C0CF5C7A53E3098E1CA41D075CF1B0FAA4D3D63203DF5A7A1EBF70F4DE9A7FD3C13CDDAF688040D9BEE80C42C7397D37BC0163DE0936D86331F997A056B7561C404EF4CCB6BEFB2D969A52553626DC842C> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 54 /six putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six 10{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 5{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf27.9097 169.161 mo(0)sh37.9331 169.161 mo(.)sh42.1279 169.161 mo(0)sh52.1704 169.161 mo(6)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/eight <1C60D8A8C9B7BA8F623D810BCFAA50091BF89AB5BE3357ACF7A8EC11C35A526108259CA49EFD17EA8971235551BABBA49C018C3375128659D5D7051D45E4C4ECFE02CC0D35373F3D4B2DC792F4C41BCD9DEAF2AC24EA7A456EB3C15513EE5D201ACCA4975153635E279761AFF1AF1596B3D3861988A67B17B4B842347EAF131C1ABA71797B1264826F04BDED0719803E211C51F417CEBD773552253C6786889CD2B3EB81707FCE2453D0BD7C65B6D6DB5614A7F2FDB700BE408D6F36A3C20DDE8F30CA7C808E9263350AB2907E45DC2CA6BBA6B44E98822CA142BAF4C98107A946AA8711E8E6F4BC5EB9C6DC60704FA7E3779BF270D263AF4819BBE793351D4C> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 56 /eight putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [46{/.notdef}rp /period /.notdef /zero /.notdef /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 5{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf27.9097 91.0117 mo(0)sh37.9331 91.0117 mo(.)sh42.1279 91.0117 mo(0)sh52.1704 91.0117 mo(8)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
%ADOBeginSubsetFont: LMSans10-Regular AddGlyphs
%ADOt1write: (1.0.24)systemdict beginSAYFYR+LMSans10-Regular dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYR+LMSans10-Regular /Encoding getdup 49 /one putpop%ADOEndSubsetFont
/SAYFYR+LMSans10-Regular*1 [46{/.notdef}rp /period /.notdef /zero /one /two /.notdef /four /.notdef /six /.notdef /eight 8{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 5{/.notdef}rp /Z 14{/.notdef}rp /i 10{/.notdef}rp /t 139{/.notdef}rp]SAYFYR+LMSans10-Regular nfSAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf37.7295 12.8711 mo(0)sh47.7529 12.8711 mo(.)sh51.9478 12.8711 mo(1)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf71.1099 426.365 mo(0)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf171.33 426.365 mo(0)sh181.353 426.365 mo(.)sh185.548 426.365 mo(2)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf279.19 426.365 mo(0)sh289.213 426.365 mo(.)sh293.408 426.365 mo(4)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf387.05 426.365 mo(0)sh397.073 426.365 mo(.)sh401.269 426.365 mo(6)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf494.899 426.365 mo(0)sh504.923 426.365 mo(.)sh509.118 426.365 mo(8)shgrestore
gsave
0 0 mo
619 0 li
619 460 li
0 460 li
0 0 li
cp
clp
0 0 0 rgb
SAYFYR+LMSans10-Regular*1 [18.984 0 0 -18.984 0 0 ]msf610.39 426.365 mo(1)shgrestore
0 0 0 rgb
%ADOBeginSubsetFont: Arial-BoldMT Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /Arial-BoldMT def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 81 /Q putdup 83 /S putdup 97 /a putdup 98 /b putdup 105 /i putdup 108 /l putdup 116 /t putdup 117 /u putdup 121 /y putdef/FontBBox {-628 -376 2000 1018} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings10 dict dup begin/.notdef <1C60D8A8C9B6E3FA5101D97F0BCF44F7161DEB1E2A84766DD477E7C8A936AA182F5809A9> |-/Q <1C60D8A8C9B6FF86FB9EA2D5AF64CC59F05B506CDB71E09A9F21E86F658612791C9A3AE57F53826569F2E36C0325E6D07CC86BF0F501484144B39809E46C871EBA063F107AE801E87D81D288B896C85DA7989E1E66728BF866D05137F941F5B3E6B62FCD2CE54ADC00CA54E5572A5692414EC3DEBE509C7CBB854468BCCD195A7C9CA3AF9CCE1A3589B55576D5053B6013DA4695BB6712DABF426AFE02B9FCB8E372FEA363EC98041BA54DD57DC465DA05D807A772E96D5853F2E2F2EBBA81> |-/S <1C60D8A8C9B64EDFF4DB3154EF1496D6E24F0CAC281A26842F998257597280DD1E6498DF18A9DA7D721D169321D8C5E0431AC7382FA4310DC48BBF78710C6BC5247040A24ACAC01421F5FBDE686580BE547F54A1AA74DC005E8E5CD476A95687DB199C1234EC19B3DCC9809D20AF7E582B47F9C3146B190D9EA96357C8C75B37ED0E8A0609D6AA98D6ECE5CCE67035EEBD2539BAF0BB0A05B823E40DDAE9B8EE162F6E47FABB31D9FF0B75F8D71F52C148E77FE80FB24454F3884141B009620C0B57EC496B1B9A1D8EA8A41DD33836FFD894AD961F351294F76A> |-/a <1C60D8A8C9B7EF322B767253CD3BE18E6883E9BFEE680E471A3E543E6B629FFE599C78BF6E9BC360B4FD3F4193BE88F8A133134BAA650EBC31A9DBCA73D443463241F1A95A036612031AED6950283B0D14D29C497685C55C7946BF118B40E370FC30C35C6DDC0B89863AEC8E7000DED8B394346462262BD43999923C02BB76E45D38F5FACA7247DBA2EBA6371EEFDE7DB20E4C849532AD601D5FE565E2F9524F3166F0EDA1C9CBD6F2D9FAE6CBD991E5FC9CACD3E5ACCC612FA46CAB683778C9E93119C2E309BBBA2FB6B108D4ACC24630A4E27912F2F48E37DD6F256C920ECC30772CD6DD1CCCB84D330E3FAA> |-/b <1C60D8A8C9B7D8BE1671B6042109CDB81BD17EE7497C90F9ACDA9D163ADAFA6361E188897A4B68FD4101C0DFF9827C3E0810E4C104ADB26FCFB7392E3E66FDF7A9C86FBB82D51B276A3D658E1330F7C5C615410686D27E44BA9CDCA4212076F89ABD511F1956BE19FF29EE6CBCC95AE9285DCCADBA7BCF7A3124FE7D2BC7C3485D1834390BEE8C> |-/i <1C60D8A8C9B854D0F456B21D2F64F910BA7B8B592C84A4B1CA21D58F6678BEC800D8864E53D53A> |-/l <1C60D8A8C9B854D0F4565C5D96D196F316A2594284F4> |-/t <1C60D8A8C9B81F2C3AD0BF8CA40D7105A9B3D27345F202DEBDE44606EFD0E90137AE13DC9D19FB7B4ABCA40FDADEB59FF02A690A47D6F26E8BDAADCFC0513C14FCD80BF39C6AFCEFE1132622D45FBB576E32F86682C5BCCAD00B4E7E375350009EFCA5AC835906F56B697B29> |-/u <1C60D8A8C9B7D8BE193D97D4CEC9E264886B4FEB6039471A932F20C88E939BABF490859EEC52AD38B7ED294F8DF2A47649EF77BF43349A736D065D0A253D952638D54F7BA1B47314F68FC1495C51454777F8F9475426838BE461BAFE9BF3E443E03AAD9292AF57449A5275904AD9> |-/y <1C60D8A8C9B7EF322B7536945647B4BA07C8DC342FF58A782AE941212DA936B500226D637B658433D28B8CA55D32CD6B9B1269E0231AED7EEAE92EA48D1AB958BAD61D13401B6A794D4ED73191B8ADB547A985247846F2CB1E080C4F3C74337DE0> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SAYFYS+Arial-BoldMT /Arial-BoldMT findfont ct_VMDictPut/SAYFYS+Arial-BoldMT*1 [81{/.notdef}rp /Q /.notdef /S 13{/.notdef}rp /a /b 6{/.notdef}rp /i 2{/.notdef}rp /l 7{/.notdef}rp /t /u 3{/.notdef}rp /y 134{/.notdef}rp]SAYFYS+Arial-BoldMT nfSAYFYS+Arial-BoldMT*1 [22 0 0 -22 0 0 ]msf310.922 444.646 mo(Q)sh328.541 444.646 mo(u)sh342.287 444.646 mo(a)sh354.984 444.646 mo(l)sh361.097 444.646 mo(i)sh367.275 444.646 mo(t)sh374.976 444.646 mo(y)shSAYFYS+Arial-BoldMT*1 [9.87725e-10 -22 -22 -9.87726e-10 0 0 ]msf19.9224 247.116 mo(Stability)[-15.1802 -7.83203 -12.7412 -13.9443 -6.61816 -6.61816 -6.61914 -7.83203 0 ]ysh557.371 316.363 mo
571.125 316.363 li
571.125 330.117 li
557.371 330.117 li
557.371 316.363 li
cp
.396078 .611765 .25098 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow Initial
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.12 dict dup begin/FontType 1 def/FontName /ArialNarrow def/FontInfo 5 dict dup begin/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 68 /D putdup 78 /N putdup 83 /S putdef/FontBBox {-182 -307 1000 1086} defendsystemdict begindup /Private7 dict dup begin/|- {def} def/| {put} def/BlueValues [0 0] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings4 dict dup begin/.notdef <1C60D8A8C9B886222A5E630D61E12075594F210C842BE336DB9F96591534B70AA4CC6A79> |-/D <1C60D8A8C9B7CB356648F788AC880B78B688FF59C997BED9C7F424F393DCD5C1354977F88401346415A241813C7065E55D26026F4859AD96AF2EF7B68B62CFE587CCC61B45D8797A946ED6DCC729566498810B4BFCFC4542CF7DDC666CFDC5EA8331313BE8758969164E45E4F02209AAEFEE0D104725FCC5DF> |-/N <1C60D8A8C9B7CB3566F2E3409E271C7C709F8856FA20F6B0AB9E4A9B3FF9AA7CFD86771F99133ED17C> |-/S <1C60D8A8C9B79815F3FA980D0FBBE424F86DBF0B947F9A6217E88E6B4765728E1C332EF7CB264535EC830A96B616E99243149883B6389FF0E9F7EB93ADB1C17993C8FA5504DF1674BE93AB6DE5B349CEE8A83EABFF75A5CBAFEBF2B5514666EBBD6B33F126421D32F5DDA666850E09BB8AFBF85E43FC29E9FA04BBF4E3DCAD17E95F972E30B9A91358B145D7C7645C757A43FD82B03001F3FC432EE78CDAEC370EB8439D062A6E8F66859EBCDA3965135826A3E0D9E91C8FCDB3A79E678BCD6078F34A970E0BF76AE59EAFAE244A4E81EB39152FF09CF7CF13207D720ACD310BAD48D8B11F> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/SAYFYT+ArialNarrow /ArialNarrow findfont ct_VMDictPut/SAYFYT+ArialNarrow*1 [68{/.notdef}rp /D 9{/.notdef}rp /N 4{/.notdef}rp /S 172{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 329.426 mo(SND)[10.7275 11.5728 0 ]xsh557.371 233.615 mo
571.125 233.615 li
571.125 247.369 li
557.371 247.369 li
557.371 233.615 li
cp
.992157 .815686 .635294 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/L <1C60D8A8C9B7734F8C5D2E243F1B0078528335D83AFF5678D944> |-/P <1C60D8A8C9B79815F7540AFADB074EB68458611985DE82705F87E9A26630C5958E5FF59A30D938E69EA49884FFE8329DF19CCEF991C94A23F900828CFEFE4463EA04EFF9CF725FA8FF390D5D0C591DCF07FE605B4B22F5392407793FFEB4E15ED006281BEC7A6C059470> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 76 /L putdup 80 /P putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [68{/.notdef}rp /D 7{/.notdef}rp /L /.notdef /N /.notdef /P 2{/.notdef}rp /S 172{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 247.369 mo(SPL)[10.7275 10.7275 0 ]xsh557.371 189.858 mo
571.125 189.858 li
571.125 203.612 li
557.371 203.612 li
557.371 189.858 li
cp
.945098 .411765 .0745098 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/B <1C60D8A8C9B79815F7C52C1F91D7B6B36BDC1D72A96C019F009A2D3AAAC57CDA405694C4A1B20326C58FD519ADD1AA8B2595D2B20D0F9CCB26ABC5B0AF95079A24AE6253BA8316901B4B3F86EA46FF11DB2E8DC4EB4827D337BCD85518B857993BF056FF2CF543B08DF408171D6FCA08714810476E0B25E78F4A1B87A4B4CA412F34C17DF69EC818B71815419EB91C3EDA95427BA3C777614E8D957C2DD01A8CB4E187568A4DA0AA9E8D3D921E768784996785B28E3B63FAF24C6BD5FD8CDDD835> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 66 /B putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [66{/.notdef}rp /B /.notdef /D 7{/.notdef}rp /L /.notdef /N /.notdef /P 2{/.notdef}rp /S 172{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 204.612 mo(PBS)[10.7275 10.7275 0 ]xsh557.371 275.754 mo
571.125 275.754 li
571.125 289.508 li
557.371 289.508 li
557.371 275.754 li
cp
.435294 .768627 .368627 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/M <1C60D8A8C9B65EB4092FCD466928115FF9556FE0CEA78673C8EFC53123DFCFACEF83D178E312CE54D9340B2FA17E70E9314EAD8CA838A18F1C08AA05521F0680> |-/O <1C60D8A8C9B673A567EBF4C9B20E7E4B3A8F699E5C39781F0272018419A432D1ADEB4CEFF1717785E72E96399EEB73C283443A7190BFE2174A0CC909C5D383F39FD1259D66E1483E70411CA841DD1CCDE7169426DD035BC40F3FE9937CEE1DA7BCC42E2AD5561FE6402110BD776D742D1E2F519EE0B6122DCEE370E529604CC0EB4C6355C2A6112549BF4140CBCC5658641B> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 77 /M putdup 79 /O putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [66{/.notdef}rp /B /.notdef /D 7{/.notdef}rp /L /M /N /O /P 2{/.notdef}rp /S 172{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 288.999 mo(MOO)[13.292 12.4463 0 ]xsh557.371 254.518 mo
571.126 254.518 li
571.126 268.271 li
557.371 268.271 li
557.371 254.518 li
cp
.615686 .85098 .52549 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/I <1C60D8A8C9B886222A09FD2519A27B9892BD297688> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 73 /I putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [66{/.notdef}rp /B /.notdef /D 4{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P 2{/.notdef}rp /S 172{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 269.272 mo(SPI)[10.7275 10.7275 0 ]xsh557.371 212.091 mo
571.125 212.091 li
571.125 225.845 li
557.371 225.845 li
557.371 212.091 li
cp
.964706 .701961 .117647 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/R <1C60D8A8C9B7CB3566CFAA52FCE334160DB33BB6324728100D77B2B89BBDD934F7502E7BAEF3DB997EA24BF979CFC38F4A3B7338B6DD07DFADE3AD4E1B5296B6EE68609013B734924C13ABE9548DBF26AD9532E2548513B01DE39DBF3C2D923B743925639E98AB61D6F7C2B174046610CB34E55322D2446EDC8E1E19163396E4549FB36C1B509D52DAB92D506577BD5929B5AB487173> |-/T <1C60D8A8C9B7A66FF2B084A2831ABF82913B2F14DC12AE4A83980646CF248D3B> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 82 /R putdup 84 /T putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [66{/.notdef}rp /B /.notdef /D 4{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P /.notdef /R /S /T 171{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 224.845 mo(STR)[10.7275 9.86328 0 ]xsh557.371 104.569 mo
571.125 104.569 li
571.125 118.323 li
557.371 118.323 li
557.371 104.569 li
cp
.443137 .717647 .854902 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Q <1C60D8A8C9B673A568680B69FB5FC6C3F56F332A5A6ADE38CD0162B20630AD954148ACB9EF3600FF213A0EDD8F9B18AF3CE0707FAB339AFC87776DEF4ACFB0005620562F13985E8F93AEA87025C918CDD68174B1C6649F1C9E36129A9AD9EB8A5677EFFE29B6B59D637A644C57E0A85198F68FC4802C3A435D8B246C45EAEA9F17476F1B8DC2B7300E2687C8B98C7999B8B5EC1D83ED62F3269C996D38C508A151A5451D90143D510A241517F23EF82450C3B8A68CD6AAA82F5F9E4D34D9D1> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 81 /Q putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [66{/.notdef}rp /B /.notdef /D 4{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 171{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 120.03 mo(SQR)[10.7275 12.4463 0 ]xsh557.371 125.518 mo
571.125 125.518 li
571.125 139.272 li
557.371 139.272 li
557.371 125.518 li
cp
.258824 .572549 .776471 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/A <1C60D8A8C9B79815DCB98EF5EB36A30F59E8AD70E7F04AF8B9714D7025E199BE3541F9E69347463ACEFD1FA53275CE55CA42F11EE198F4D5BF0843052033DEAD> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 65 /A putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [65{/.notdef}rp /A /B /.notdef /D 4{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 171{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.111 140.262 mo(APP)[10.7275 10.7275 0 ]xsh557.371 336.53 mo
571.125 336.53 li
571.125 350.284 li
557.371 350.284 li
557.371 336.53 li
cp
.501961 .490196 .729412 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/four <1C60D8A8C9B7734F83C5B090D62872AB411E676DE2C1D3147C5A2B8C3A37484C3234FEB002408145B695082EC9B6CCAF75EE57CCF6FA> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 52 /four putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [52{/.notdef}rp /four 12{/.notdef}rp /A /B /.notdef /D 4{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 171{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 350.337 mo(LM4)[9.01807 13.2915 0 ]xsh557.371 357.128 mo
571.125 357.128 li
571.125 370.882 li
557.371 370.882 li
557.371 357.128 li
cp
.619608 .603922 .784314 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/zero <1C60D8A8C9B7734F9574244219D3143FD477AF16BE8E1ED0E518520DFD917B5D6519C42B1A954F06CFDB361778DFB55E3F813DDFE4311668F00B36ECC7D61AA37FF2B35CC01347D4C5638BCCF34519D064CD28CFF30D87F2F3CDCC7CA2A478E9127F32CF18E4B00DF6F25E6F3226583B0058E90BC69D3D263EA282D077E405D3687993740A14F1950F5A> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 48 /zero putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B /.notdef /D 4{/.notdef}rp /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 171{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 372.191 mo(LM0)[9.01807 13.2915 0 ]xsh557.371 377.089 mo
571.125 377.089 li
571.125 390.843 li
557.371 390.843 li
557.371 377.089 li
cp
.741176 .741176 .862745 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/G <1C60D8A8C9B673A5682896034DD8C04B1913BF1E117AE0E92685B15287184ACCAB1F8EA169EA0431284569C7A1AE288D7C6981A53D82D2426CBA46B2A33985E6EBCB3CF4462DC89B4F9505F01ECF2113D69ABCFE573EE78FE339E69ADACAE5DFB1857B83F5CFC33035C86ECBC2CA532CD4E0F93DA37DBA91A7F43A558BFD962436D8C94C8F08B64FD7DDF69DB101FCF06DD1ECEFD1F5A9FC155E2A18BF2A79ED272C70C263A5DE0F6CF67E11890FAC82> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 71 /G putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 171{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 392.158 mo(GIT)[12.4463 4.72559 0 ]xsh557.371 146.528 mo
571.125 146.528 li
571.125 160.282 li
557.371 160.282 li
557.371 146.528 li
cp
.65098 .211765 .0117647 rgb
f
0 0 0 rgb
SAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 161.282 mo(PBM)[10.7275 10.7275 0 ]xsh557.371 167.981 mo
571.125 167.981 li
571.125 181.735 li
557.371 181.735 li
557.371 167.981 li
cp
.85098 .282353 .00392157 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/Z <1C60D8A8C9B7A66FFD9071880626B30B2485839235E9A75188AF08528289D215850B106D1AD1AD1E2444CB2A7C1957EB5F23> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 90 /Z putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /.notdef /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 5{/.notdef}rp /Z 165{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 182.735 mo(PBZ)[10.7275 10.7275 0 ]xsh557.371 296.499 mo
571.125 296.499 li
571.125 310.253 li
557.371 310.253 li
557.371 296.499 li
cp
.258824 .690196 .32549 rgb
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/H <1C60D8A8C9B7CB3566CFAA52CB6681E6DDB2DCDBDDF0727377DDE5F214E28E1F8808279B8AF31D87C786A6> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 72 /H putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [48{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B /.notdef /D 2{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 5{/.notdef}rp /Z 165{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf578.092 311.253 mo(HIL)[11.5732 4.7251 0 ]xsh98.2407 22.3501 mo
98.2407 26.1509 95.1587 29.229 91.3584 29.229 cv
87.5693 29.229 84.4902 26.1509 84.4902 22.3501 cv
84.4902 18.5493 87.5693 15.4673 91.3584 15.4673 cv
95.1587 15.4673 98.2407 18.5493 98.2407 22.3501 cv
cp
.329412 .329412 .329412 rgb
f
84.4888 67.2295 mo
98.2427 67.2295 li
98.2427 80.9834 li
84.4888 80.9834 li
84.4888 67.2295 li
cp
f
91.3677 39.3818 mo
99.5552 55.7529 li
83.1763 55.7529 li
91.3677 39.3818 li
cp
f
0 0 0 rgb
%ADOBeginSubsetFont: ArialNarrow AddGlyphs
%ADOt1write: (1.0.24)%%Copyright: Copyright 2019 Adobe System Incorporated. All rights reserved.systemdict beginSAYFYT+ArialNarrow dup/Private get dup rcheck{begin true}{pop false}ifelse exch/CharStrings get beginsystemdict /gcheck known {currentglobal currentdict gcheck setglobal} if/space <1C60D8A8C9B88622D3> |-/parenleft <1C60D8A8C9B85B8F253A10FE0A92D7AFF65B45B4ED12212DCD2F01EC5D5D7654471291AA23B56AD55A2972E73814AF0351AC3F2442F9D6FA3BB523FC5CB2B8E148A3A3B203FA76C7> |-/parenright <1C60D8A8C9B85B8F25F7DDF0EA9EB4F82C709255F60448BADE467AB30A9DA2C24A72B670B7C4D663E1E8531AE373CA39F2D833A0BF3569D8099B0D249A06CCA44EDCAD19E4BA5B3C0D> |-/C <1C60D8A8C9B7CB35696C402A14AF1C63683697B2C39AF722B27EE631F5615079D6D5F253BCF06A6AB892B0072AA2152C2E1DC143AB46B34D8CCEF05AEAB04ED0C2B83A7FBA050578BC02911DBC9B95AE0996A51935AB88D655D6950EF57C0BBA12459973995707539E4C802DDA7946CD8E46E83A249D1DD34B227A6437B15D42F46608CEA1CAEF9164B1639A56A6D912B02773> |-/W <1C60D8A8C9B6FB5FD1E6C541CA0DA9541EA377E641565BFB294FE9060F26996B146E3527693F189894C5AE9FE6185F1D96AD1AB1B15B433177EFE70976C361670091EF62FC068AB83CCDFD5DBB8A82A5C9C5D79AEE8FD0D6808DDBDD27> |-/a <1C60D8A8C9B7734F83CC5D65D0B6009AD551E5D1E2A11CBB80CF24698B2F4DBEB24D1BBAFD45113374EEFF351EAE1B0EB0E2B5AD0DDD40F3CFBAB06FEDCD79EE48BFB0FC3E31C094BAB5EA4770CF314E5369DBF7B462585A575D220C359207F96EF704DE1CBA4C044B2B4C4A2341F8B74E42460AEBA5090EA82165426F58FD98DFF6C164377B42873FFC637A7693D02C45F1CF344A540B0BD64E1FD67FE5449E96A6F30ED3AB7A1A49C517F08E8E1FAD6BBD679191CAB2AEF1B2677E245BB6277B283D614B70A4F10D8819D538D747DAE8A74BFA4F3E76845B8BD440435293AEBF1E8AC0B1EC3F> |-/c <1C60D8A8C9B7015BA94070756AF677C5A3BCA594DB06E248B24B0B574199D433C877368086AC29E63D4CDA13C2D8B82A8AC4476CEB1A925122726F568FDF22CF588ADB204183DE9790F1B8CDCBA204254B12E7A03E4EF01135783C760F3D2BCDC2C06902B217DA0D7E9A07204ABF22755CB722FCB554268CE56E2BA507A03731AEEB7663> |-/e <1C60D8A8C9B7734F835A98968E7933823501916F9AF2E31A3F82A9696B2A4E5A8CB0E7EA8AB631E97A376418FE0ABCD8C808E8C0B8B4DC7B8BF760B2828D830966EFEE8DF000EBBDF849DE44A508A8BB148ECB891A16E46E5DB361C72A5F8D671B97A52D6B9019F6651610DDBDF021A0FE4578E400F62AE2E167E231B5AF04457F301E0BAD3DF3> |-/g <1C60D8A8C9B7734FA93E8DD1B902BD507BCD1D23892B526539A64D9D1BB320EFF7A53242FA3AE97A641C3974D19822A71D4CF658709F4F64BB6B7CE9A78A1C8409E5CD0FDAB74DD75A4CDED235C8E64CE76588A729F5A1C0D93262C7D40A0D13ACEC49A117AD440EC788720D41C36B381307C25F2CE2FB3D7B835EB3248F90082A4F07F9BBCC68373389E1BBC644D9C31833EF2B77431F6DB27556588862D3BA636CDACC778BA95D4E60F81E2A8FAEF7266D7CE7C0BB81559843ADF2F9557185EBE1B4B5E7F17E02756035452E86B513B3CA466800A7FA6ABBE5> |-/h <1C60D8A8C9B7734F833097A87588C78D3AA6FF4DB4A6BE6F0C6E0C4A4551C144AF9530856D170900F64C3569C8DB78D4DA8AE88D0F7C17BD599B4880F184DEE6FA84D7CEDC53BCE518B57C87E4EF75127F966200BFEEBCCD> |-/i <1C60D8A8C9B8B44B5B4E52704A9D60340E9DE2DB73F993D387860424406153391FDD> |-/k <1C60D8A8C9B7015BA9E9CA16B6B2E6DE7385C42EC884F852D26406CB98969FA3A8FE69F0BDA3FAD03FE9C3CB0D52C7F97EA26C> |-/l <1C60D8A8C9B8B44B5B50510BAD10C9500E4EAA5E82> |-/n <1C60D8A8C9B7734F833097A87588C78C4B9B249C6CB15B6BA46CB4392113155F0E73798CAD81998CD670B2CE60CF664546EB8C3D964E3B72D2A22FA800B1964B01F723C429F611FE5AA3B814D60466939C1A6560253BCE06BF019116F422B5229A4E772233FE7CE9BF949DE1> |-/o <1C60D8A8C9B7734FAA50C04D7B253F9991F0B89D6275357B5260EACA299A2160BCCAA648A6BFAD3EFE7BA65086DB00828346077929A33FF99971D2B604E43F53F9C0A75BC3DB26DDE56767B3AD5C067B09CB815A85244AE53126BBF878068BDE663BA19BB7D801870E061EAAEB951E9E585F0657B9BA6C65F7861ADB3E3B68A6E054> |-/p <1C60D8A8C9B7734F83307AA6AAC1CC934BCAF1EE449A6A6C8B38A8900110D166A669A1E0BC43B56A0BAA4A181884E9784E034113F47B03612377A7300589A09DF84D8BB0AD0AA42661CF20519E75E3E180D218AA30E6B352B0B7E6A29971485A887EEDF356C7A526974B4DBB5EB7999964849DA2448F68D9245999B696558FFFDC5FB14732D704C5177AEC8713E031E1EC5D3B203C> |-/r <1C60D8A8C9B85B8F25ACC1E386EC975DFDFBA2ED352A00CEF2BD9C0797849F7DE644D048DEA328B14E0D3EF9E54C207C67F92F4202C78B9D4391F0143275C0636D777B073F281D6841F912> |-/s <1C60D8A8C9B7015BA9A446C606EE662684D2F64871E004F44E246CB435C117808C36E17B2922B0C6E17D705819C706F229DE9353CD7075807F7EC4194A697EF35F375A05968037A8AD63BF0A3EDA197FB78B0C184517472BF5FD6294FCD92963556B6394561E3571CD30B997EA5E559996C3243CE983433E6B48F8E77D10C7E4D0D0D283D284E38A9A581D2556DEFBEB08B31B8B5D2C3292928B21783440C6BA86571CD7605747459CFDA8969914B573922F5630A377DD8BA963FF3233D8F47AFAF39A06> |-/t <1C60D8A8C9B886222A73B247B035B58786654B4B18972C6FCBB2AD402B14A4D9E97E825B53086A7C0718659F0CFA8DC717B71B5F1213549A358C5C00CDE7BA68CCF56EBAEAB79F4322196751FAFCE10DC4101E8C6FD8D6C8E949BCCD2B> |-/u <1C60D8A8C9B7734F8C7C21CBFFBDC936E77DB7191A783C5CA48BF410D1FF0EE97AD4660721051F1F44796E6DAA6CF577E1A2C3242D8E299A9AF5E99DE4560E20AD2E04C2C71FAE16C973015B32C0A29A207C2B901F462E5F102945698EBE651A40A2367CB2> |-/w <1C60D8A8C9B7CB35668A0FEA1CD15163BA3C8A60AB9F4EBF1E52831D46B310E258A42131BFCDD433F21231F0271F037837D5FE3A69DC8875DDA77FF1B142724E485E84BBFC7A76> |-/y <1C60D8A8C9B7015BB2C05C8381D9874742DA913201A91810ADBE8AB0163CEF0D91D3BD587372912E8F28F26C7E9D05C833A2F1F3D93D29660B205E7A25E23965DAF5A007DFB81AA34A6F046F1EEEEEF99290FC7B88BCC21963D302C417F35C552414BF8AB89D021F1FB9A07CE6> |-systemdict /gcheck known {setglobal} if end {end} ifendSAYFYT+ArialNarrow /Encoding getdup 32 /space putdup 40 /parenleft putdup 41 /parenright putdup 67 /C putdup 87 /W putdup 97 /a putdup 99 /c putdup 101 /e putdup 103 /g putdup 104 /h putdup 105 /i putdup 107 /k putdup 108 /l putdup 110 /n putdup 111 /o putdup 112 /p putdup 114 /r putdup 115 /s putdup 116 /t putdup 117 /u putdup 119 /w putdup 121 /y putpop%ADOEndSubsetFont
/SAYFYT+ArialNarrow*1 [32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 6{/.notdef}rp /zero 3{/.notdef}rp /four 12{/.notdef}rp /A /B /C /D 2{/.notdef}rp /G /H /I 2{/.notdef}rp /L /M /N /O /P /Q /R /S /T 2{/.notdef}rp /W 2{/.notdef}rp /Z 6{/.notdef}rp /a /.notdef /c /.notdef /e /.notdef /g /h /i /.notdef /k /l /.notdef /n /o /p /.notdef /r /s /t /u /.notdef /w /.notdef /y 134{/.notdef}rp]SAYFYT+ArialNarrow nfSAYFYT+ArialNarrow*1 [18.8242 0 0 -20 0 0 ]msf105.17 29.229 mo(low weight change \(LWC\))[3.86133 9.01807 11.5728 4.72559 11.5728 9.01807 3.86133 9.01807 9.01758 4.72559 4.7251 8.15381 9.01807 9.01758 9.01807 9.01758 9.01807 4.72559 5.5708 9.01758 15.0015 11.5732 0 ]xsh105.17 53.793 mo(regular weight change \(RWC\))[5.5708 9.01807 9.01758 9.01807 3.86133 9.01807 5.5708 4.72559 11.5728 9.01807 3.86133 9.01758 9.01807 4.7251 4.72559 8.15381 9.01807 9.01758 9.01807 9.01758 9.01807 4.7251 5.57129 11.5728 15.0015 11.5732 0 ]xsh105.17 79.6563 mo(spiky weight change \(SWC\))[8.15381 9.01807 3.86133 8.15381 8.15381 4.7251 11.5732 9.01758 3.86182 9.01758 9.01807 4.7251 4.72559 8.15381 9.01758 9.01807 9.01758 9.01807 9.01758 4.72559 5.5708 10.7275 15.0015 11.5732 0 ]xsh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/SAYFYR+LMSans10-Regular*1 uf/SAYFYR+LMSans10-Regular uf/LMSans10-Regular uf/SAYFYS+Arial-BoldMT*1 uf/SAYFYS+Arial-BoldMT uf/Arial-BoldMT uf/SAYFYT+ArialNarrow*1 uf/SAYFYT+ArialNarrow uf/ArialNarrow ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 15.0%%AI8_CreatorVersion: 15.1.0%%For: (Alexandru Telea) ()%%Title: (WeightChangePlot.eps)%%CreationDate: 04/12/2019 13:04%%Canvassize: 16383%AI9_DataStream%Gb!R&kBc\[djVk)J9(ufkfp!6cte/nck8YX@_e4)9Pdhs\Xsu$Z%%pQgi0$ipK`,QlWUh"b8SW=1efch`KI"iS&o+qb>J:rhdAAa%r$IBCDLu<@A?f)L/Wu5T^q@K['Z6Y]]26]j$Mm'C!]Ai<aj'7AVT'n!jJ`k_1\$t4+(B<?+D0O<ERQ::/*cSmgklq%7B_rSbmlST%dL0OGa\f*1UB@+!fH6[jR\p'Rhs67[Z!hUqdirH%'g[bhB^`FbeUj<]hc7*')O;-hZ:*)U@X!Ib?4?ghqhM`\@PrGbY=BiY^Bqj:%YCRk6YKHpa!06P)qf?m9?L9-$1Vf*B<7g%_"!9pck]<6Km/SHK!-']M<]MNS(*kO1cTV>==ti%,fIa&HVh9Ul;qj/q0,_3$(lruq%JQPI1!8+5;Y.#oj8"usi?r:k+`p\\47A%,V!)qCi'+K:5;(Q\HM1iR860KYIKtMjs(:a_T6Jb69B3u4IQi(VbrZ/bQOMlh5ka&&h%mDXPU-1G:R_q;`jPLb1OdbW/Wa5WVk``UA@W!U#oIR<Li<lBqWO8p*rZ4/ht4X50$)6).-;C-c*4[8u\;^_R+ZiHc0,rZjELIUM7%"%J:F6_H4t)@50;UAc*](j-o/gu'?7LPQ=ffoBK"Y`hHC&MReB?kSt$@^aq-E?)'FR%Kr*1;0%\P8j&L7+jd1"`IB4J*cYh4'$n*%DF\TSYleU]2hZW6bhHe5W5[",:TYf5!Adl!J3,Z>EE:SJIE$b+:Vc;nX_D/M`-f=HC.C%PY8)<r$i=NmnJ?J'qkLmlA3nZ%$0)-R%@PdW;!OFCZ/&G@5`qpe@HeJL\-[j6,1R##c^Ho(u#h5?)(b]R<(t05q+!2Z5@G`G/kMnqm,^Rr#,M?-idAnPml@SDP_7!L&g+<"W%)q;RC8$Qn[[Oie?9CZjJFsq^Gl(2b'(Rge?HbSm#R*A1U2ZX"+8`(B3gW/YOH3LQ]a>%3fhe9c.OZVHdTHOKIF!#X:9l)/O'qc2!%(,"ffiYthN5CcVn4!.SG'+up'+$0ZJS9I?f-KN[C/c(p[MI>Qnrho-uc`@qP^!Q!4miQT1>OUZ<RuZ2Crh\i#PQY8D2C/45-CF=P%"hu#q&E%aBqX:"d+HdE'mu<D+cZhm[d7:uXM_VI<0CWmS_&?WrNe]=kZ>rC:WSNH%mY#L0-%PVpCa%rb(5PIfQCWsca)'Nq73;\Y%A2=6Rnr[_[%q9'7@asZ$$em'*-N)0g3*H0eJ.0:.NMh&os"pPYG".C:RR/5f.to'(qM)R;q5+OM0ZP47Z>U-/:_UnmBWd&32Bj!$%+!CC]RdT=fScLBOnmt6@=qlD1ZCFeQ#?PG-;e:H^MV5D[2la0CRV\arW4rGk9t!KWD:')Bdq'Uqi(PlL_C'Z!SVT-XVBN\VH&nC+%A$dB2--`T+PAe1mbQrO0?4m&T=GPC\>l)GCGgFkg+t4FV*-N0l38ukmi$#-nOI.M8`Y>d0i\s60ZBf7nJPYj`-Y^[0m`moK.?K1;%/oNfCT'ZC.P,F:i[14IJ_>ujteL,6X7HebrjOcEmj,j<'4*lfbA""V\i*i,hD`;ndhudd^rpGUXp_*9P2H(_FG(2os#I4PK!-AH;%5\>dY9R%8,1'kt:*?`F60qJ.@Nb`1/ppN":foL];>_!l>:tC9eUG6+s:!SP6'-7PWJ3\eYj9?G=5%4n+p^]<@=O^Cp=27Z)j$@Pp%"6&iYE\eqYr':`L?@cZND#[Y!W7B88r[XCp&51k'+SR\M<N&J`:L!T>3db9$_4rb[mC1WjPVUpu'5Bo:nc16GaOD4.!$Ug@Z#`,8%TA'1]Nq<sBX[BE>TZh-@L4'>67UH]+lG$UIVnhp=?>"a>DZ1h]e5k'NrsKAe2m3@teaFEDUDpulk]ac(q>sb$cNKo'd'rM6JPLbr%["V]RYJ]:/!&PUM*pEc9B6h=pq4>R?4@:_@YK6DZTR#,nL(+SEHILZ"&+c81]k?Id*K"#,_e'j,O+cbjGN]jqp>5oTZrVq^*r_XU%DiYJ6Pkp\0iqqnfrg1IB'>UV6VVkpb"A%K3%ul!\)I%dG=97`Di;p/iV/)Is9rgM2'9Mt(KtBY!9c,OkhEm;'VEH<8,[+TfGmUlp%o,WRYIM'b*O%3FL`n2Zc;;D*NC;o87D1H>W^>-X-H5d3Mh=j==aW%_2f3SGIQ97:KDOMor)[Tr%i(nX9O]XR]5T_\ph[b,a$kES'%/au5s%fR^JncsPf"<W*.:Oh9[fM1C<n;5sp^s?pNeF3p7AZQG:Qu7HJR=]o'`c`"'r*+q8!5B0Dea?@_J0IK"B8=ki53f6>;<'.$%7SEfl7UQ7&5'eQ+Ws(UT#k`IRGdR#A$GuZ,^S[dAb4F9XSE#BEJ9D8Af0OW?)*#JG2)o6bi#)?I<HYO8s24dD3g0H?dQ'8;6fb+0%lj/edkW=.sMug[FO;C=3J'dq/-klsCpo<8W*V=:QPj=,LkfM'd7Vr,GU$W+dWZ/=!d1]lF"GRk1g)tr[CD"qn?2PM$pdPPAE,XP,%E^7pdp,ILW3=KF!=oms[Ad"qG1;%")qk*uFN;Zr0$Y8eqAc^+Z^t[3LiHjK\6G\^%/uSh>gGA>`aP@;1(2TlL9JYbmI^e/%F@I;A%#Q7MBReX_/pK[I(j:e!Ip'NoT[O%eE[H3,]0.AUO)/E1hl;TloWpSI%IaN5@Ai@G=Vod3Y&*RLX\R?9RjUdQ\&3nr-_(7UHLCZf1%&sJ02(RQe^P9ENugQ)4]EYuc+]C<*j"hA!U:q;]8i#lsDq]3Z%,^DehfZb2q1E$[L%GW7<G'0^AT*O7XU](Bu%q01e4%oe8aTF?u%B>*#L"s3PP_t0Dho=kR&'k//-n`/Gtm=DuSRO2.b8k6*4GJjV8lH9E_T/V;8#iH8H713-:o5>Jas8!T3-`N1=g5P3QeV$,fC\`8j%2$@BN?B"S>OuY(`A%qpmc4J?IJEl-DG[_,W,TSUeLPc&-4&EP3_[O@\0aX,BU+uQFB;\&2iHR]9,@efSpWSY$s'*m7HrF[u1V!KZ%/7;O[e*GCrZp8d=rpM(r(lMm)=94Bl[?2MZ^gU*8_Z(ftLXH-c>]@Phq):qJK1(m^c:n9;?djPLC,,^;6N&&qg=2]8P:5t[?\stg%aF>ii]=I>`_g]gfq]i@u-2oQ+GAcoj'/:lnhO?-$_/R2JiR./0%'@G2O7E(AM\;Lfo.NJpO.p?_M[T536fUC'BT/l10Uq@gFN<Ne%k[MO.Y5]-9NY2&QkZFL@r\%?Xf@)NW)S@Kd+P4]?Idk8/Hd9&0X-$$kA"Pk^Mp8CnXu]O?jVt/Cm*?BPJDHlr32\kKl"6=A2uU%Y%;J!.=A;,r-$:\nY)@bIi@UYDS6X??[;$NGUXmLmmDXc\*i0.:6+JpV>R-fe+didkNCc2e%+:?7\MaD8/H:\')hK6j=lu%]E`Jtce%<f>e-EB!s<I>Aj`@ZYkEo,#6M`??YZ![dDJBp-Q3>u0]@V''B@fZa'-N4aG5[YO@D?\l4LG#2W<fs!fjMuQ\EMFd1UQBf*sLL46E%a<Gd`jhmtFIKsqIDO;G=/J#LLA"qq>>LP"_k4oC8T]hjWYp))9K)g(FYhZ>>+YW9&7)EE$Xd8[]eU]87J-Fj_nFUt*`*JF*Ms\cV%Jg$*Qgq\RolEJk0O;dZ[jD'qbf%s06lg96FW4tlL$Y/R/cS1*P6>S'7>6h>Z'TGP$NJ9H",T]NbM%FKeWsZ*6Pc7SkR$"[$)%dO_%[&q2]V.r<O;Z+$,"'?*aq^CB`KHhs6/ZgFYk)g"Lng#K]YRp_@59A<>^+=r7<I7,qS'rfR)BG\?;Y@GM'^(c!o.(c9TnqE!;6Q_!%L8(.8(B:`$A[V@?=M2R>d-.nAQajP49P(.VmoI%(*$Iuc+aXT/_904[NnEl6%PF*fndaB(s%$uD#WHlKC9NKTIW[Fis&3+J%#7P&%K)=48jX;1f]RG?(DjV*^*jJj%F!+X_ZdXH6aYC3^p`7.45S"&R2J63S8iqXVMe@7NcW(HXH]"@_@R7p(5^ddRXf/"fWe?$YP__&^%Kuq9g/Asj['EUOET7d91$t9^,L*J(k-s?aG;lYi[H:<S,)=rBi\^j.SSOmH\Pqi+.MMip^/i@#d4.m9ALN[/*lj7*fmN>*2@J1Lo%<jE@_eHHm1Y=,U/@O=Y3BJ=BTG6tX=Z^6uD5];M?\Tg>8Z#*-i@=eN>.=+<UNck&Tmtoai*_1lh7biKWX`AcR^)h&Kjhu<U0&F(m%:kHN'Ze-D\#$T_Q>M?lQ/3^O]lHm%m.9\Dq&6Z1D>Od=0$"%DhC`:F`51cY?1H2"a$G0mDqdnT@O_!@s^f%bKN<[5PKcT#&`)YR!%--#1HZTPSso:-iR'&.tHY\55@TrR/p8<OH*&<0?c>RcSU\5=dL@H0-:O\_ADR*f\=P9\`2"rJe2oTDD-Lo2@@GWsH3s,\b8kbdFW%%+SKZp1"W[-htp"+)9k"m,uj5T99@gj\6=EM:Ln\$6tg<o&aFs[5p'QjGdRD4O&t,aL!jIB"?QS_!5#?)^O01R,=Z^^ipLOSD\g!%-q,2V&PN;>&aXod67\%-4'OAO^hFo=e9(!31F/@.*;lg&\+/1!n=ll;>`0l%QK.Y1V:;?,22$hK]J@po$.LUc?*#lM!OQ!^f@A:D%cdka+)8-5a8f\%J!'O?L#1Ni2c]7\82.:JV"a:le8u7h0>.,+IQqC"ThNF5mZA'Tlk$j$qKMr^@oV+8iUVRkA&J.I\Fs;bgD`W[8%LST*C.idhH@].lbcu+X49/YJ*+Ytl_!N+@a6dCMJn;aTtBE;0PLS2f*J^df$G;A"@]ZbiCBHRMK9NGAD8dQDA[@+hs@7>4SKoV$d%iBh10c%__:69r[YlQ*Ajg_Q2jal3Khi^l7IAYBE0"INke6"*<GT_?<96gZ]i+#Q)IOL2NiD7JJ^FdeC2(oNd8WdKdlKB9[)$BZA9%Y0#NS>t*4XTJ\sI#22\H='>?l'YP)ECInQZNY^aTl8430Erf78*b8H-M2#X'g3EQ><J2a\'\\88NDMK:@^OdiM61#6l`_gi!T)Zb%FpF:Fj:-8U#\m6P9a7ITla2d.Xl@ikl%p3;3@eS)rQAS1%;N^k]>]ZR-!""9TFE[uDmZ;ggLe&9+%#tLqM8uXXN8<3Fkb16E27.C%F9$0fIZuZFCpN/GA@+&or3r4qoRAkYmoO9pdEnoF=[h?cmH*0S&No;D]C!GUfhsm`]+MCa[$1Tt?X(YZL,?e#.K_T<aC\C,6htmM%/o<uap4QrlZ]-"P[p.RE19\)&!B-BFU6)m2ZbMJW'B^u]F=,'ZH\%[g#r]=3rOFB(_#0mK":TN\R%HpnY:(>UUBNb:6Y^Su3fS:T%&`6JV(\-kq4esf11!MPp-mG+S7g5>Tf\KC6M$b/l@&>Wi("[iFSZ%0qbrF't3s.Wu[W#BP7/Qrf?@p@RUa>gNRKI$R+)Duq]p"bS%#J>-ObQ]6++a&CCLW1Ms3"h@.l%#OVe(hfHR%(N^=[APPMempk/@I&aHPADH>9.Pcbc/?-MhsPmFOY,JOA!=Cio$2:g\GSA)Cgg[%Dtl#RDH[:JjQhFM6+j`M"4j=sQ_DUgH$m%T5F0N2].Lc?]Zbf6>:G<qigF[EeHi&4oab7O6gr'X;UOBX>4>qh%`=[N:LWD*mPB\Q%Y;;AaDj_#4oD;4I9VQF%%uhWS\QS$jSk0..G(/tC)Ag%mg[#2FIF8Ai,))1+*dKF-$9t/ni4I%#>uPkM&8jFNV8@HR;B^;bRep7@%?;6a&'RLfKG'4sa9d@?<_+1qtp\**fMVH*71Wa4m1D=E6CKJ>hfpD'eajaie`%$0GS,:(po/2\8AQEa>Bl:Z.cQhngKH/n#_AKKV%As-l_/)(RO16_a,I8Spdos[bg<6[F!o]JEmp=sN;0t\*^]u^oaZ+J#pETkB5T*L..AC_Bt\oLU7Dc\9(l^%,&hO3XlhTZ_o0sQD(%(9ZZ(5%c&!R#d'MMu2u<ip1TI>?TB4&+05GBBsF#0-%_OPB`T&9U9XlpR0-@`jW;@Tonh5efPE\8ArPB"'KqT`EgYHcM':N4>K&b%[YTp%]EYT3I$+.8@".XcKAGQ7F0!CRR`1q,[q,'[jP=V!*=FT0?E/YI>q2#8^0Je:A.\KrmQOLWWJq'(PR9M@i04YeYMkfWUf/bP%FG)dsC\B)t%0*tU'RW<s=u*_HBa?!n++0bg:_T#r)r4PIkd)d>8ogPeYJhF74RXnOZ^pphr[M=32p@OZ(#AjUHM5/IoD4PB9R`SI%cqO!4#5pE#+V"imP^DHrn0nbG[m.6-,;P(($^l'i+X2&[ACA<`Hh_6Dm1b"SKrM9L>9jL/I4dYI^;QTpDr#4cT6i1agPat5mq7#[%ZK-W9cB'@7H[,*f*9+,-0)1`LQ3oj[_u/LAlq:%(Q<>Y$FlIq%WUEBR25(.tdJ!%?Q>P3D[8OgqWNifj&=V^/0`/JapViEc&\fk`%WGn*C,W`QlD!,fI5=S@:=V2Ya'CeP]%pcTZb%^!^-;3lW@[[&,PN`-LqT&dN$REKNV#oQbVq[K3@UJ]:P#>=CZ%n0D3@?t&p4u<@%(GVI%lfIL&&P!h)FDV]K-2Y(3c!nf?]AIW.Q"1+D,tE4;MNK3sFmI,p_l[Lt<VMd^:'D#u:I,<9/l!OEB#(-E>6/J_Nr3^"A0QkM%\!;rcqd8H+n6B,h,^nR9M]VU@VDKU(-!AE\/D3d.iW9`>'eAA1rM@qU;+jcuE^);_Ml,^Yr8h>HQudGs--,U,;(@7UrN9,qgLIMp%GQFncdo*F^MWDXGAe,1f04*nR&^Z-uHgAoSlmD&RC=Ar`Sb_#'kb@5!44k>)e<@XXogB#;eoYd3YC0Sq@97m&8kVZ_C9*$(BW4!B%"cL('b!C[_!4C-JTTkj-]KlSu>o3b.YM$'ibXgJkZ`VM\(&_9\P";;RM?#mRSl:\P1:OW/(StX[[u4eoHco!:B``C586Fp)BOA,2%r4WN,7eRO8Z@*OWJ`2aYUZ^$C=/*i2J]&VeKlZs;29<5@+7n::=S=h?XQ7'fa`e7dJ\!^o^[Hs2p:_1SSta4iNe&;')1!:3ZEki`%T>#b0h99d]OW&4p4miLlXCbfU_4O:/X5T6nqrtBc&-JQ];W'JX,Q8.Ejj4qHMRXtK]i_VenqS$2^aDY=R=0j;qZ)06L[An^!q"Df%nEHjd2W5Qm=Xa4;?mBYU#g0_$mm8jUrf+t[UqhtE*>0>3l33+I6=J804i0KFEc(M/Xtt_GJcahqPDC<d*,%LWd0B5uE#GH?Da3ZY%8^OE*#(Hh[0e!]ZqcDoF`T2r5"=u^nD,5pn^9RfO!>Ocd.8T?1'-WhL*fAi[4qJ)1P\WHR*U"al#MW#Kb45r"*!l@b$nAb(R1b/R%qruHPpJg\uZ3?a7'unU.Mg'5JN0V1.a2C:T+;?,2Z+(uM*69;?))bM@.cLmLc5Zk1MTN+-mr7dk/u56S/Q*A?5tV1mp;[5_9;2#&%ba*?O=k^\5g#det8kXkBORP-;!5qQg5lIqY!hZ)WC0c9S,_'<$'6oJ.Gi9Zd):%ecYp#PK%UDIW[#uSK8%<j>KFi`KYaF-.Uo'b?%gZd6HV2UE#!)%h,(FtGHFoujJXBta@o]%7(dgNN"7ZQKUK=:O0"3[OFbe2eTBDKNu0N/rEJ$#e%':BN-h6X[S,;qVgYK378^6mED%5m&^_4H;76qE7n#++fN:G[&g+VJ!6Uo(.:q]hkd.k/7PeL1Ia#.5WjJ07!aPfMuOC9;/kWmgsuc<l:`r]0sc5qJI;Ui.Ug4`Nd&8%bD"c$O2u7XF/)lhF;?BYD$;Mfa*gW($tk9B7%5CP9l*2tf+e(iYuQXLZKBh;#B)otRYUGk=s$m,/mp+/CH_<=M0!.A21_(AL!GMU%f7^L,GRjC3e6&&?iqn0V"V2ojo$S7j%_@rPB-4fMk)^H2cq3Hds"2Ou3RS.^Wq'#cjh`nU^bO!FA-U?7Mrf#8b[KkCN(4TG,kaY<%gS_nGDk["@+U#(OcN4`>,Cal8M=ajA::AiX!Hn^KP@[Kt+DOXT9@$Qsm,SsJ3O]@A#0?X"=TnX%GbATR:gR<rYe4;*0W6]1TA7'L%p3%..\Iu_+Bt&4"-REJ:,tp>R?=dC"mFa-VDP`j%9\19E4OoIU"N4IJFe!p\qsl@(s"ML0J;;%[m!j<^\mDW7F3B:G3$Q\t+MU2$%cnY=</c?2li;q9k=F@D\@;qYV,sH?/=%X5m]R2ApdatDgY#O3C_5d-3@d>Gc=mgXo+;u-L+*0*]R:j:0^OG/H]'ik/02LsVoX,2?%?@N"rN@?@n=mef+=FKL@Q'isjb91l,;?m$POA-L^,tf,ESp,hW`bQIn87:]#2tZP/fJJntMY_4.F-U!LT>PVlQSD.q@.9G@-#+M#%5puHn?"B'N<ci!<gW)q.l#6lY\9\>XNI.r3g8S(%%3=Rk`&*QINkRE>f,'c25'OCN5l&BJ&>+lVo2,L_i[I"<c>T#hN]G*a9X-2F%odf:Nf]r-bZW<k&@2qaTr<@qJU\<sf%0Wh?i!NB2r.8()@8t'!!;8eM2_XLEJ<qqSp;IFspL3_!n8c7O6;?HaeGKI#^8(_@bLZOb%KUp,<g=)iO=i];&k-NqH5<Xu@ns):;)0mWOb0'tjf]_#S6RY]Y>=jiMQ"OHAj_`tLe+O!6*@;.%nYmK+/.TEG"#0M<3V/a;ZL\uM%cLW'<]&@uDTL>jgFj@'Jo"?]P2@Pc$"6@(8qRSimQ;ZeOZ#*-V2qp*N$l$hC=*$2$[RgN-S>i8CG$uKGTKVuM`8>?p[08PZJ\+T2%h6e#ulbst_lFhJL0@&``[afA_^j<8M59m]b5,#rm$EHuEI"gjYmY&SL$T.t53S@FOI'dCsDjQ3&ep_$7k`o@@n(i[f]>KYf)h.0!%94DL9!hP5(-DpP)\H:,#:nfP=k]2EU@eBrgC-0XfAU=*_*=o[jVKc\_n*24Wn`<(XY=J0)B#^j'Eg#a?f<6Shg\@13isXU7".42u%CoPdb30d=(ZjXE<QGb..ps<d*F%2b@M5I@GK)BX?;&h1e1eTBWDX&5IOthW&gS*&.H+e:Q@(W%`KK8%d3sOo3`gensdc%ZUr[H_t%bBSZo]qEUP?oJ%n^a*QA7FiX6($5\\IGL>CBELY2%_Q1tf#$C$dVgF7=Ofcj&^3u/f:BH+D1>L[`U/'Z0Qs[gh5%'8&eDg(JP=[k%`nOU*lGKsQGd3Q+jL/O@Ri>MYStS<P4d='VCuf[.<1(\>IDpDNB9gk#p-[Rq5js3qZdcYP";I%T$Z@YkY91X>_4]4V&XT:7_>tqe%M(Q'Q:,W`#+gZ/jR(b7>,I=+r)f=]>Pg=g(9)6]4<OmUpX4`kYR8n-fFoGotSLRK/(3ZG"!(hQ^Ru+nCZV5I6%oHU&(eW3EE2'lE%>kC-;MCE?'8UF$p=,jU<'e*47IeeCfo_F=N!'sau@$posE6""se!kOSU:sRba*keYRWpUXVk9g,3!XpoiS2d-cY^AbbOmg[YCkM8%"77HZ^MW)%P@*2P;NjC$3@`:%U%6/V"o"rp9KMSn?,2BshqYf2$6A`]b:QOtbBIVK-#br-F$U0feN1F]ZpOq.&"B^j/$R0DI[;W4%F"Kc:II.A?MY8MRC^b"%R02mE]Tr':F?iqlSGrYMK*Vn(Z6iW:rp=?Lq*W>NTq&EM^r2%_fbj(cpWi9a-;+!sj:s_B+&GG>(!,GP%F;=L%_#Z[bncYJ+7l3U]?@c*UrlI(g>QD:el")30g>7\<ikZ$)T-c`6'f!`,*_pj1`GEUoH\$bM5DFb.Tn.ZXr#J4sFBbb`MW<%f%5k]FC$H05],OIr,bX)7h94b#EALN*"[A[7FG$mIAZZsA&!1L9)2&f_u'"2H97?-j5i&e@LMn$+8@fCK6"YeIc<ZLku:a&cjrZ2ui%.;7(^=[jn81FohPaB9=^LWB-Z&TrWTq95rbR="!eE#Y3R\@E/jm\.:,`BDZqc!r455r:&$/@Sf"^L[nf^geRr4XuJrUeP[AF$592%#MBhX_Hi![\64Gq>?$#PE&W7o#>8dAk=7,T0*mHC35,iO!`-g0Q\s0k7;cr><a'Y,-mtm-Wti/35@MAD;Qp->5[kPCBX.XQ%@\R3%>')W=/jR3*O&ikl""_@D4b-f..R>sqGhB3fjJq8PgYhYJg?Ru60&b^c;_e!*'T+E[]Z106#c&b7l,!AYkX,mBag\d<-TQhQd&8d+%q8,BdL0'eagT6d%QC/cKqY$0?O.KZ!n#i&])7QaLc7OegEp@k.X@Ob'dpl9*/bdr^BKHm,"=.sD?\f&nodD@Gh353NoMWtd:\4k+%0oVL>A-r:qYr8hqgSIe[#+3':mnEBL2iO856jMo\1][EcqLLemCh2;g%%*BLF!HEkR'Sd/h[ZtiO7sD.KOGaF!HkamF2?sK'(0m,%HdPAF?cgV!P?[6Zh.Dg'JZhDBQFu<<Mrh,CH`TV;Mj_Lr(RUbU(Dl4Xs,MYpIpW8J45FLQX3dn8#SV+o`pn4VW'(=bgY_,$8cn[i%C]F;Rkm[;*P6J>;587_'n86Ues&aqQ^Wn%mJt0TPA808-,;5[6d<(IAS/c#uVrHCpHH8Kl$Rg3!%-02dBhtZQYf=0H?QLB#)4sUB%S[b;253Grf]Mj9+J(oL!g#[m#*o#c?CU>aCJ*uJRgVS\m,L=Bc$)37f:GrCf\7K;_lLVZ?M=90)S'd2RAXfL90E2sT5Z*PqUtZqE%?GH2aJ:.e:CG1%n.Ec5)fhOKS&SMtbAq'"FoC].0A-o75r<cNR(1XXPnnBV3M'?EjCroGg\aYTBmX?aSNOl0p5O/C/K%;Di&?/P+%0KGYW<s6NBDObRp.WE"Aeq\A:98<(Z$^:`R8._uS&+EnR`?.aP(o%kcYIAcn#TQWIU%roBgDp-1&uK"3;!kmUfHmKU3:$q4)@je3%ZDkRJTI2@Q7_\r:h^I.X45[dh4oORq(OQ[:7'jZ'EmM%^!oj^heqir#n;ZhN\OtjZG^M0i#I%N(n`<-sF4%`90cJp[EpJ;%=fZZW%Gfe8f'2P=5b.l(u53@@j\1?6J\L<i3kBAj2_I!o\&+brm!WC>@ERZFl"N`'Cr!j0kaohmL%hY!!(lG:X+$"jGUbS3\OneoqB/aPr%F6VHYl%b2UU[Vrg@`%UEI1O(*eRkWmNk]^,!#MrZR>?CD3,.o=c+rZJ1X?(%I#);*iV;6,U"#f5D!3?,>VWJJ>]-d#3_XO`Wdq7`%f'Rme>9)G=B!9!?"s^1a\@hPdgR4+HE/ag(MU0A-k1LKrRC5Sbrs%$(C6'#).Ji3)Zp:J[6TD+/6>?5=er$/Jh&',/^KMV__0&Wr%%pcDp9]rD""Qa)o-femKQnGb'h[Zia]@-6u6i&"bnE^[-2'9cU(ud"uMMIkq]"uitoNtW]L.8ETc1m,P.U[7PEg\9RjFp40QTZK3%p>bnJ^uaH):k*E9UN=ggJ(YEVVuosN``%=fX\N*b9o_<"#95qd`S0<j\:plM=8JYboA-g2KV4o0-/$I^a=;mqL<k)TC'&<M)bPP:%6(KsTF.-9rMW@ej^-$l?4T7=1?^2Y\e;2b^(E$tPf,`^X&(i<3^fc!X2aoCcHj]dcn$OF_po:'c6PJ5ATfhNq#W]S-7+F4XL\1Vq%Ms(Y!Ei&Et/.>KMY:E^TB3!jqK4:C`al8?]db^CE1#0P`W-37QL.e)P@CY&;DuQ>lRi@+W$[,*XDT%tWb4Zd+JNn5-bS3\I4TjQ1%/q^_<J#/_7U%UEL+Bi^!H6T&#"$K#uCj.[EZ%8fQL]Fu(!&4E&%11PZNe1PqadWGpg4Hh;&V&`0#4SLn`L'r3b^M[0_lIY^W,+re%L5!&:F1qmSUS\+f"`q$-/E&`@?=O*A?'"6h<d.sm)?Xfd1OTCSW5@TK#G:fZ>*9dR#C'=N:j[/Qd@n;\_(;@eLlP6`gnB.C7r0LT%4jhk>1:;E`YD]>rCkYG<W^sZ<f.Y!6g@Kr'P>74*6n\QeoLb/%=ZlOJ6>%as(Kq&1n/+OT,'IL0^0cpZ`+#QC1+)C\([XhkkQ73W%N.)p1rD9CPS8BB`NK/W-a(i#fLXmJlZ%e#o^5=DC[)Ts)PG19'LTWLlpC9oKr0=_?5u1i$$LF#+/84124"s"$i^.4I&Vr:jY%`'d%pEQUdWQhRL(S)n0K4ogVkC+9+Io[,(7+]Nt^m$GNK(Kh=Xu'V^Lf@04ePCI"b9#WQ&=oa,?=EMNT(`[Sq'9W@[K3J)VH>KOI^5!d%JJAuk*BC7=9j#i%RGd#V$_-'/4,7GqKTu6J`?I!;.eFa$V0aF/k&WE8Y4R)XJ=lbUj@_VN5Bu-OTa-E>]!KQpVQo]tEn>U[i*KB?%J*M5@[)-mjD;03%h>U='A21\8Dn+Jc>!AB<522R[o=9ff^5'E)_$c\&NgCmKB,Y/7Kk2sor([E9d6KPd*aZUVbR5-4&>!?r+do7m%eAJ6[RNl#Shp,@Y=aZL91JrBM[9HcmojCR!I(ss^R>k,bJAD+DBK2Mbdd1);>\<_Lncj'<#-/fOKu@b=f@ZQOHQH[8#W6On*WmK*%[MB>e5`H`MpL>*S3m-m&OE>AIF>`?eKj*$^5!1DJ]fmcBM1'Tj%jh[>(Ge_(5G&n"_L!Fh:SdNZ2s4:Ig\K1\W_a[_]*NpoA90)H%E9i7LW6VU"4o_KHKId\Z!M$X-fj8+Bn8&%:e.@[\a<gPd?EeB=\uS9rK8sOo@B'd@l9u))PC9]tG1K!:pKD('3-BM-ZN[k7*`h8m%P=:io3848i7WjH_'242\G^!4D?a+A`UB1.HM3`<Jrti)M@M:8PLtWP(V*?[]BsN9'UO-(B%(Lh#=FaS^*/skDI_aS+$G>1J8:c6:%T8emJAYA/+="%DRnd7Y$\BnUW:N][1iC0kb;$NIGgM$l$d)nVGnIGW]efT)ciQBg.%?CkCd+hCKqF+tg_>YBS_OM&9-n7#9JA!O/%_Y91Yj%0P*<pI=5<.K_l/C3^"<Xn9%ab#fHhReZThNg;B>BT"T;k2C!+!So0IC@g>j:*AXWsJh7G]?[cS1L)Y55j_qI"FU(a0Y%O%"<SP-(B>ALN`bNr=],E<Z@l9'gRS=F$C%3uXHoFbd*andZ%W:;5agtO5QD/R709n1U]u6>)//TlcIa=A=pZUjs2HW#H[>1\";K'Q%.99-Ai#9>ADtiIK1=0G/'.\K3>)J^(QC*>:l0G_h:d?`Q/!\rf-WQftEgCF>?u#D_bkCiR!d2Y9ROh/)V;t<?1?Jc@)qiAbeg%^h%#INs)bCG?%ojs0f>5VKg,ac;YYkk"069l]Ta`+B[16L\S93;d>_auL\JS(4cHr^QPaTB6f**>9t1.o&3[l)K%D*kgXMEoq6F@$`+%dmrLSLObgEa1)WM=O6[V<<cXAgUCgj8Q6:8YDuOR5_2U`@(TuWH)3jc5n3-s!uViHBh.XXofK2[oJJdP,+qbj*TK1#Ap:F.5X0kQ%B=$Vp#5Zi>rO`l.:)Ql',@d?-mu&ZHf?Z)8Ri9Wd2LP<p.KaO"*:tAs!)?S5[J8bgWrS,[bcafESHVX@m`NsHPG\)XK-1<^&qC$3%XAirk,og:hoah+OT]JGRSZR5KkVD:bBc8MQGR>UeITss$OTP4(bj5oW9`hPj@f]I$RQp5W,lfd>*/VNC.`MNagP]qeH-P#?e&DIf%gr1?I:^Db$YbUMV<$!)(:uAN+m,FU-h>.5(QM,?loHN\\JAts/;G8UsSAgpRZ)TpJmag\:>jhkjBJasg5d;Q-rtMfr^?o7,!3#og%3n)d0VX(MjP/:/&7],ETeCO*>59:Qsh@o#s<rI")<1_fA35I`7.6Rj_o!VM<Rk;2J!doI@NKqm<*%B_(n>YaKl$RhSAP,`WFJS_8%#pE&EHG8-&n^MnRq.\Aoc88md0.KbAM-BTBNY.jTD3u78=a.DCHf__PiSd]^[C<+tX\GGJOe,)-.F^"Hn+]28qVB2T$G5KansJJ'%@;D2H'N6JWPP/<Hq3k_@VXQ_2I(cEo3L-KWpFm]WHmh3rA4o,tNdsKA.](crC];3[M_=,#TAG%J!QO;(H+O!O4A.H0oG$jus788+%,!7>nIl[fsG99$irq;F9<.7HPq&aM1OcgX%aLA(qm^>\:5Fl8UF5'L`<q30NojuRXS"J-O'VjoJiCb<b@^j8<hP2t,i6PDm0=`rf%H6e1-lu:4:5A^S#Va0_>^Z0L8-#*?ZI!bnli,E:7SV6Jh[<3b(]Uuo,+t=>.h#AM]"^J_'4R\_-"DK:q)0"H>Z^/DOmR$6im-];0%Tl\mAgBWa%r:CERB])_=L;4RN>=R8s;@h7iN2E.3n-$hJhetnA2U(pb[R]`q&?aJ-&+n/VGSiGkKm-`(mZ('m2sFP]mGZa93BQu"%=;Rk&!`8eZY)s&H=mVp\el!(2@\?$-LH<f:d[*H=-s"KERhECf"q(k"9cu/i!S[S%!*V:9<.R@hWD*&3YQ5'WB]\Y@]`0qk/[(u2%r=f>C[dV2rIEAiAH@KD3h?dRqM,j:A"__QZ\S\AU1t_8t!_)rs-D"3d:uj^:!!V4)n/Xu55R@H>CL,^g#`Q`&JKg"?'e$FZ\k55]%24cY:eHpV-W`iu?MS"GAJ\\$VgdF9l-`ZQa2(iXs]H`F.Gh[U")e_b1LJ&"&a&mTfZ'Ie6`(LoZmC'WI'_B6q3UeI.mCt+pb^m(t%MD$nmJAr$WpEtr#fm0i\UPD-Z9>$(QX[##&#'k(p6n=&08ZAh?dZFna!']S8P6D?lF,'aOI5+lL&r^I"^n&$.&o87i]+BQgWDq7h%q?&!QT!u.>0tJ/\b[2%@LdP8]1A2Qj=O8/2$kc'_)cr6DT\rG%!Yl:J7<C2,@C^dIgBp[G]i0DWN:r?@P-5i'@HknRCHsONn!,2F%IBQFgoVX#/aVF;<j0^r2="7Y"iJ7CDD[!r\;OY?c]%:Y0cQACnmKU]dX@FNDIBrVoS<qIW+kF]Z@(Es2NEGJi;!s1-S^keBm&ir3%Chiiq;roQ]Y=o/QS\g51>=EJlB[Ii@1.QWI[8p%J`5q-pRMT7=a[Aq^]oe5Ei^\GJ#&q@!Q"QXE)dc%HprScr/cs/u/D$tn;5UiQ%M]^37dWkQ7+PH1;Ig4o*lOiNAd"AJm<i&o;/$;L`9co$li'(#=CSPL),Bo+#a.4PlLsT1G%B0d>*lpVU].3):^rg(S==H%Qhn>;T%#rt=!`S!:AW8Ns13PPtKI#a?8?E;RVDi/e@#bZSC?;)2P)RmI3OTjrsTVl.A[W1o/m*b)KmiA@+I)W7a)HjN:7XdtDmYKW/!M&8P%Nf>DZ7n]*A7OlXH0"T_#gg&f1gN"rD9AcHjaA1<T;##g0JgcGW^`14/"'=Rnhje^MQkW"*s&Br)s4<liO$+s;l-@sn<gYSQ4N1i0%ZA`[4;ZbhDd[E3l?1^\Ir1J<Q&uMJ!R#Z"&,E#DU]9BNC<=b8mh"b5FpBI]HP=<TBP0GWsr5bs6/;TooF[ua5*8&iOWe1qc3FbFF%hl5qaN3I'iPt+t2l')X8iSLGGo1N[lc_N?TIrN(PUGT0U0'\D_C18EFZEEtJ3OLY+^I-EaOt^(18M#]+.Agb0SUdM8dU#I!WC/h9%@U*H%@l/]'Xm_B5XqeHGM?^.l_)CGPV/3NNP`Ff9)77Pe?rdl:5u!@G#55=(^`aur`%P5XZ\nd(T<"O@-jQ$#FV'W$d`*;=[F&[2%#a7".Pb6Ps_[*9PU_kD_E8i]G>Wg\)9GR^t5m,Mu!a5\7D9L(aD0[U*cp3h]4\mdYhf'9K.&s6$gG!l@B*bt'7CM;YP2I$E>N@AU%6BSsc3t203e<&E=<TrG.:CnVj$O"%L+q;l[>T"R3d?':n!0]k'Ykk>*/-,J$"FJOB-ILrMV;j3<)1ERE:*k3pVe7GLGSWVCZ/tqV%bT+A-I`P%IDbl44Wqk^?<G[QMp6D!GH$gtP96H(A05rO>8XW\S$]$*7i"%nMMb03orjXoFFmDPa*ead#*?igf,lg%&?@+M\rGJoS%>O[4@3"-Mb3Q4$&=]Y)Xat<Cp:p[3sB!N6ZE,\dBWT=f1)oC<95@PnEI(^)ba1YB0:27W1`dIp_Z/;2T%[<)EY$W;[L@coL&@H`l%TFE!HdH"i#.$-h8Uo#tB9ua!+FA6@>$P=!\@p4-fi\,LFBm8473bGC\et1BR-*3pI[l'g/-&PMFDQ@OZ6e&9C?>=L$GRC)7)EIe+%QE!.od:bP4Vn87F&jfinh_7B;Q"NbjM">$%7*5,X)$0f"72@Eg15FCZSVf!,W=q"dLUd7:/jW91eN)tKC&S=PlE)X^@5V,W.!tI9%N!D]Eo_f(6c7nnYOmS$@kW<Wu#<VMp>;,jC<nJ:5\P19NMIuPu`o>CIM,bU4_jo>>e</8G7<MBGolJCc4RV=kpL(mDerQEZ1E"\i%W&*ZJi<`*j8f1]5]\MAbm7mB1,s)N5#m39$Nk.MdjYqSrn+!B?Z=AELVBZ1B9;4E],[/fM6o,]RL&c#L&rCeY@_f'E(IKQB1hJ2o%o\hSM:>J3fSbXqJP[LUoqtAGqgI2bBo!R@4+ONjeqmfCp+WhTpF7J*;l=Hp(FiO8e)3!?nI2j%p,$QN1QG?H_BXDo,&3-E:Ku?UB%R"636%62-PV_"f?2=]YtS?',j4Ap@BQ9:O0;:PHZNEk,(VN<[+,%g^V"5+2W@RdZsVm^Z:7QGB$570#Q&k9>PcUjlDc+^9OMc(\m%?@9b9hKA]m?TCG+-@(,EXg8\9ISsH"c0b=M\.uC0lUgf`OtPg*(I4!dDVkO,9/13Jm-ttEL7g=kpJFp,C;aLgB3/2!`%?7a\JBNL%&CN>.`El?Gn("hulW*<K=&iNSc\9j:7p-dGlTu<m6ejTt-YYqb>mPXD*hM1CD0V<B@OrNk!W+gO$TW]D4*aFh_b_(7?sI'=mO5.R%&eS&EO=ChMkUbq"PY,^q3R/-s1UJ86=Lt0+OBtmP;q=Pi[S^Di7shG.*mpInd'\8q<9E][Bs#bT8XXj;8DGENTh'DphpdlNBjLtN%e/-Vtd<MssP;Zl,eC#L]%B[dJgbf95qsn"g;\mt^[)\ec>AF%)7^Hr?=24Lpo5[_q4m[!_USSAh8G\)#aXT@S1/8lFL6?Jcc;[Jr%][nN(^6M"sB/BCK"sk@S7T`d:&Y_F.$*guGOC0cH8`:$G`78o%epR[mbgM62EHST8l5?<'3d@CE2/;?^/*L(Cp@9+_m0YmrVTKWg%kd2l(Ut(([f?e55d$ZH:WM.eDTT`@`Sm=^]>sS_Am^P^qSTY1m;75>M20@OeFJrC4$8lqZ'm*]7h8M6ng(e_bDY:t+FP7IOa@eRh%L/+2!XBl.=Q$MB3DQh]q;m4!ZB]kuCZ$P<CTP2$Wm>$g0eMnAN#R1IG4;Xb9VIuql,P:=n0;-e#iEUEJ4hbQuH7l`/3XJbHY-L(5%1ijQd_K2[d8SsMaUGMZ/paOaPkZ?%Ia3Ufq?AoM&?GWBj,f>n.3aj_%+TY^jZ'.s4RQF*lTQ>J8oVFjEU38!l]9d%^)<@iCk2%*H%,7DcnT%hFcPFCoS=Z<q2DC;94./Wn>7uW_rl4BoBnWJ!Ph2J1^Qn6sEdFd&6_$sg5H#'WN9=Zim$5W,6b:]b#;*qggR_`Hc15iYj%;bqDkr(;TZDb2?427WVO:mK-j8[X6AjM4n)H%tUHhMd$$R5AmH3Y%?Ib,A3'P21,,D2ijM^UPc<=<6%%Veo2!;TG\XFMS9XF]'"+%RVEjMK+`c:lD83o?2@E087GNO5RomnP^3g%5BWFd-`Z4=f@.9bk>*#4<2b($\j"=62)1i.9GZI0FA>+U1+m`/Tr_NFF"3>C3VA_8%9W)@^1lA8NKq(H6UVdX<ktE#jNR4t!-a*=1)@j]eU0>,RY2h?A0;g$HeFpjn'jYIUK<p&LV"64@\@.Ii@.g)(UX6/uZ_qh5KKn)'%[@YmenJI!e4muC<Bbd*#(WmcEO=[;R<fuj0W4QL'[<DC^?_8>'>E#T#O@H@[WoTDoS!rG:Of`ZCo3q'Gg6)A1B&o62O]A6X=D<b[%b`5XUMqX\!!e30==JnDZ?g=Rk7*.6@cF1d/OE=)u9u^94kK[se\]XN*,Wl88A\/GCAAK:.!gRBmj8@%Z@7]atBU,op'Tl61'!15'%k(,&18M).(=4eCgP>4uFdZ@GRmRZB!N%?.d\;tL7e(3%o1/]12CDVaX*gIp)EX?7&D-0#o'TkZn'".9M]Onbq2&MHQc0d8lL1VPP%UN`:B/424`+KUH^6:L/W&K+]%VA56Pca_FMN*`Bp<cO/PL4Rh\?]\/023p%F_,qK)=QsDG(bq>c[;48;VRs?]`dje%TU9e#4#<h1%KGr"'e]d88K%bjp!.UFg=rb,U?%-Z.S8j`]qrBG`F`faE;^MT>[rucZ3mqKAY"h.HVHZ)2V2eFZ<.U6mV<S*&G;e,<.eq8kR#r];%;)G`/Gud)`OY;G=iiZPtGD5Y/%+N04iN^SliReQ=Gt$MrletU^:d)9/:?K61'lhj.LJtAl]Oj<s:,^UelJ[Dt:=W7%/(DHC3Ul$c%3.nfcE'9`f]Nhca:1940fX;9KU_qs]e#jK;Betk0S4KS/AVU\dT+cL7-#qeqn"*Zg0?]%8;-,`3'_NZ,J"='d$i?&Hc^MPGST9J]%\[9AJm0,%-M3fL@UcBma\Z6VAQK>n$b'6t>b(D!V>'m<*MGs]$&5:$Q'iC^8Ac?u\!Q2'dk#:B/l7so>oSo*!C0T_KhA;]&+Va'E%jYUAlO7q6^`k5C&cRI%6<K"\B/mj@;QXa="I@?I:RPjG*H6f`WBkU%tBuHhkIP+b3$i[#=8kU.=onq8NCK.*Yr*HWP'm+W4MU[^E%X&PnS\"QIT8#SVp/aMN"MH%sKBl[.c?;.8ehr&1PCK.+p*s6qqPP%_A5mp*@crAgH,M!d"/Ao!RIC'FCG+FIDRVg4__l53)b=^aS%>0KN,Ntb/1V/V17K"e`/::_q8FsF'YoMW2Wr(=l'E1C:7,.OdU$HGUNhDG3"b=ger.",s]d(!MOpM/5Z91i@[:P=LGFclk6SJ0u8%g"37)]>fD:#Due;J.0%N50!(c)eR#Z%iNsO>W=cE6TUPt6V4[(W=,rQDhr,W]c&;:Q46EN,ER@/R"NOMJ6pl4itU0LE\2TJ3g`AD%n"j@FABFUi\U'D;H5Jhf$;3LRo0'f'm`<Fl+mj#g*iO!Y(jmetK6F\Nl0Y6&n_6sN"]cM7E3C[]gcI+gMa!tAdMT'mf^5inIhmgC%,UHitG^e"@.s?9gW3Cn5oAQ]7dC%[X5f7g8;XI8flf*"9m'Zq;T^Yir<M8hZm?pe/-,5MeTi(1M*:f#<8diG]<RX',q/p[(FP6:Y%V=)R$;.4ZQ,.sp@Yu3/&bc/7l/pq:<4r(f^MVX"j`GYEY<M8hF^6cHU'jRLK968K'e:=taaSSs&#saP$m''s(>E[:s4aUGMi=f:L%[s(%2%(-K(0kiM#8k\O*):'47kDE3MU7aOJcMcZE$?s.)D$lDk]N3=k?HVYt"UiBiE_,q\$@9bllfr9E*ifMJ7l;6to]u9#EQt"(%p!TGE:-PXno1L[dGQ(<Wa$Zlq:"h%UBA=c11j-g5E(>\TSPTbENV#D=.88nEEG8aO``6X1jD":6hp/`":)-!'pV,lt2PPsK)hBXZ%aIG.jm7A2*B>c4GohqXrY89h"]R6Q/A<dPd`#dfYWp,a_l->+&kZ$"[q#RKm\?i7#P\TFkSI]d>24]n3@_-kCST9bM[B&PV3(J)A%c'><n1o&W'X/8gqV*"@'&H-?)-)^_nNN?8WVmK6PXM1`9diHa`!UiLmE]'EahWm&"l*P4qY#S2/r1'f\Wp-<YA8CF/G=Bi\VGgA^%VQ3eI.1Jk7%s*G>3i-"@jVr7nWMWU_5PBblCKAn5FX>c#]i$_Y;D"G[c,_3]FI,hJGVu#mMHupE:8sQI%#X:Kdj`hqC"-7U=\Yf)%Gq.?F?WKn!<(j-.Do.4YF@s.kVQ3eI*Hf`D[H`"?B2m>/c*QQXaB@&89!rb%qW3ZN3d&4.RalL8@Ml')3iAEA#pIt>6u#1?*7P-%%+CF_X0@99JG<_L`NesH5+=7T0fo'I+:=Yf\_C'27EF`?[Hs`EFlf&9Gea[ael<>(EkbNR3/OuYTr@dGXdPWQaYQ0p0p;0T!-<c%#%V]lII1[R&;QSY^kp`V(uG>o#R!(M`s4NnHaN!>hDS^f6R0J,/C8DtE:oqPJ4-tFEV7u3lHH5GD.?aIaXF/P-2A(2b_E6[5/4X2H;%^Z_+J^62.TU-%C(O"(GK-fl_JIEe=aMGs>F]@4oe'X"u.,GKG&20Z&47I`fjB@JD&UI$;cJW&sA9_Jaf]<8c(cahc\Y#]1tNkZD\%IatMNiqC=kEcLu1<A3*qC+b85:1:h&3q_i#_n"@+MiZi[b34k,Iha_=F=RbWdX$jQV*Vt';Z&!r1?8jW*DTX,,*UUl4g0q4M4W=N%U1<@T8(FRf3`rQI2):@Vg$.m>Aj`u0QOVJ'QjomUf_iB?PR+*mq<5>5.g5Mh(p%JYDm1=9.Sms/Ac"K5"Y00hWj"R[Q<i(0lIgcD%DIAeIeg_Y9%"<P"f@$Rf$4&`:CDX0&g3:[Wh4QR=U!.J<mSY@m&*X5gU4,q6U*HX;a8i;!LHL2-r8uGB-.>EK%oto/RI3Np;gO[*%90srj7b68#DD:ES66X5MCS+`J\nFXLnhK+9e.4gX\FjIk?p?\V`.fbOKd2K$*"D5KTRN\j'dm>+,?l:r6AE[,GbONd4=XmGrT[F\%(gMfnh/K8q?eO&b,!YaT];salXa.gTEGPK8)t%7%O%4ELS[!PV1+^_a.ISa/8c0TQQXV8E902HD]$kQ,1S&PWc?VA()*QLi-E16<%^k3Ug3FP;*bQ1uYjgD>`ZNlI+ee5He4/5QL<or?V$>VkT;-E:?k?P:jkXMoNF08n8(DPHkEX_V^H!r;k7I+3ge*>[p[HlS4MO7'Q%c"6*9=GCala0jFcI8`@4k0tTP+UrEOTo;RH857'?(S0/j0Z+*:G-]l*^+/"KKrL%G0gU\f<5t_:"6ig.i"c/^[5')`6VguACE&#K%;$Ap-K,e=D0[+l,:fke5_n9(Fc>Q()@:(\sQ#=`+[Dk)u2HN$$6kBM/kJ1k4K^$!8W]N*Go9/hd.Mas^1_o4(CoFer8<'\J/7c0%%,XXNPSTinb1_1@-P'=%o*rE8@.F"l*/K7Dd]pPu[oI.O;PaRYA?>)BZ>M(.5:--fV]U/Jc_L%EjA1QWa@m9&rkOU]@%An-R[g0l^%=\/k=7@0g8;g7'bC*9YmQ^4KXeEc(f0C`[0.nT$b>`!H!YmAZd@IIX2,gDQW)4nM7:K!W>nYlT/8tFaq`.*o7VMV@lj?UJfY.=/B%6pUPd0gIJe*k&S:iGk-LV?Pl>on:INCq"T<dPQ:MNI/560r9ae=#.$]^N!$/DS9G-TEGt"%>>)#<\HGN8lV^`$Ii6,k7]_G,Q]IL%Z]LL3]tC<H/NsWdWoTFM?H</$X-*S^E\sh)Bl`.Z-]ZO5#2:GWG-$?oBc6iI)sT0AG\5]MC9em]bjIGAh9p`u=.NN7if'&/;bEP?%4n3IBnbI4O<pGo#-EULroMT,Y&JFc"UgMXqM0rhYK/tS!L>V3Xhoo!.,dg6&,U&2DFu,'(8CFihCgcNr4!X$417DCC\fiJ$V4EiS%V,<MTPbG'q\u?j%U/&kZ;U=_Z(er[?0I41^G!W+&7[=g.Nu9JP<'Tm7`:]jeVj1[\F6r'\?#))>'3<o5?e96C^5ArFQc<O>Q^esA%Vc`J(qpo,n/*ug,e35LGO*qbHE*sZQEO:$F44i2"AD*bc"aKP\ZsQ8^ojYL=$S3]*ajMp]+-S"1N;Sq<#"mm`Y)`*&&n^4^?ctr?%$4!1>$n_i!<&*_$[)9')+_9kn?(h7X8R^pVlWP0J15$p(TWEY.JrS$-2,`8-TcB&^&Kto'N:*iic@Nk.A!`E%ko"DU1mY=p;'-LO%HHq'BCKu2#QqZA/;@4hA5O!?c@f=%";F''$#0HeJ[q)KNX67#'1E]H\kuRa"k,b06cFWe"Yu<^4^&7U=MWs!dEsfm.$\OB_WHcD.%\J,FONpEWK=LuCs7MVRnlgX,@[$.KiO&r/u%A:kC)JWQJH)$tJrQ$?c!?/'@'M89[WW8%0!34P*)ls)t=p(^M8#k8OSTLWu@]k=A%.R9adJ9j(RWoQ/(7QpRMk\4%I7V`"c=Z975KH8AN<\iu4s&-R(DIbPP.A,a>=]`5":S%ggcWnU?^5pTrcoCJl^101s:L)$i6q@:!%9DM!Indf'La(aUapeng^n#nkD;EiX0!ZY0&pn;:]GE&+%`S]r.]>a.'Hi:lVH@2dNH'MW93udJ'Hi5e^'OJ+OSo+@LNO,;ehWq(`%2Ulm;ot/N&:jVm4)6L*Tls;ouH8rLd:RRDB^Xl8[^euAje?_.7?GFr>\^%b;:Os`Y\,%ObWgn.6T/LGqpK&9Gf2'$DmM\$7TW1)u%>Q%5bQEGdcrJY9c?@K(b9(Q(J4r<Y(Hi:<QYLlLZjBb&f7Ao'FSoq6o;1X>[<^5i:.]:9&KR<Z>j89+EVtBHN1R&&kn\'B#c!1-A%^Q7iR!aMT!pb';'p?5OAom7?I]@Th?SP83oI`(pVBlBs>GtJn0l_j-L+j#4fHi8V;)8+)TXF'oQpLt*b[p46_T6A(/g./lo]me\E%qO+Kr8`[9tob6#E(Z"D$g=edc?9\ak*Sp")rdB0lSDp5f+5_cp%kdi^^Pf-Q\9n2(]\F=NWIU>ml_g<+b#7TsHi:=to8qhPF8ik%%P*2l@r![kid(/oI)3\QshWq)=np8Z4\]2=3g,Am9p[OeuR#W_mqm(SI`4[/fd\i_oE."j]k#HfMYh,gE4m?9;mBck\6ZS05rRBJX%^")QY<G;Z]S3oc!?6-3*]me[INi]Pcm!J],e<UncS9l?M]R!bn(\R\#Xro\!>Q$1hO3`XZUm#krE3J.Z`UJYMd\Z^7*S!8DDY<%`%>^3Fo^C1iqob6E=AbZ%8-T[[f%eq`&YFi8X/u$uep\IJ%ASbA<I]qWtI\l"MrNpM9KBqW&2,EMHqC.pmJ(D;^LWV)X_ba;_HI9ET%g'+a])Yq<urNsbgi2XH08QI:b>Q(?0`UiQk44ApEnQnHI/+cNPi,q-1]%>8A^?&r#qIqI86Zc;1*pQ&[Oc<BPC(-N\$S"Z6MJO,6%i'+UAa[3V.H^HjNpVLiFNg5@iTU%EhAX+fnqc]LWN!(qd+UBP230ZZs-'9^G0+'5Hbk?TtDt`sB%<%m\]0A-O1GnK3Z=`9YIdq\7%EGOL?&^#jF/nSG_;1$/\+epc)H>rn5CTd(Fk%q$Y]Bt*%j!Mrt]16Eab>#Td,Ni9,\6]+T7[B87/@58'Rb,W(/GA^5q<bT[D/J!u%^FWFAZELP%%Ef7YE0ti0Ieob1k5*brQu63uR2p-YgMJbf\2W;C,iu@?p[a'[icqYfH`ia:@8HjYYNsiZZ74.B3rWr=I[1pbJ$->&%--!b0<l396XOMMI@HBT9#qIs,jtsbBHg(DjARfQEV\)>PbZ.iDIZ(@akgKN,L`+d$#5^&UYnn;+bj=j0o/0*.J],gVONc0qMV/a$%9A+XU+o<r/Y(/p:RLWQi[j;RnOih4nLpb*Pm<SI*Qd0Ea:Zg9,RLA)SM!=onHge=FhOa22M,hjlgb(hF^>%1n@*I=1]D-^\_)-QS%4d!>K#?BHe9$D.Ol7pbG:EM.GC]W)7Unu(3?G(["/LrQN+`i6n\)mhC`4*mH.?TYCi`=2D/AC7qHPt_d=`D?3,@@V;Y@PFeNQ98M%gNgqB_V\.l=Qgo6MVY`gq9R*n$Gt;blar#ZSk]<7<IV?nr=uj6?>s-B-$uIl`J\*nA:?i>E&]kIict8<_gHAqO+19"\1o)ql[_+r%*bIfbi7gM*5#BEf\pNa3Rl(GmIV2$N&EX?(*U##J=G?lA`*MR3Yaeq4i+p?MIf3eJ2u45u:F<hL6cYjS9trHi9VQF%_749(d4jD/%k*pkY'HY&W;Vj1g+1]AZFR]\;^ajjfH^O@70[U!KI<C!`nDlj%ioU"g@C#C;\jXfd?f!O;^a"<4NFVH:+/]`<:DbWb>2tle4TMZ*%nc/`[pR(D0j34[*3g6\Z^(.]D/+@<\&]P+_8ES8-689EJ!XZ+OB[ZOhq[M@HU&<c"Y?`-]!<h\6#JLZL^.*Ge!:P)9Y1-bJ%R('Q%\(/*Fd^!6Sn6j!A:qi^-<;>9Jn.A6-I($;&9?CZ47hFUKV,Vnj&Spuj8jBE@H45aOP=IP2[<aqd("Al91&;N@Q:i)7feHV:e]EF]%M%kKj)dY#j)c;F!?^M;;@l:pZ(qWQHH,L!hAJaBOJ(-kkklsP8!%&b0IE9S6TAD9;A#"A#!Bq$5ef+:B^AOs4eIUeW6j+!l-:-,b%2mpgElHt6+0)5;*j5+&OYf!@lS0,u]j]p>7gj#-KJFLY[AI]-r!qCb!IOuNlbB4XnMa/m5LaL1ra#$!kQ^YHboI_WA;LG/jGK(Y]%(])$1-URM+m`ioW*@#.s^O9O8):-sO-NZM[ReVS[gp5f8"GP6j/DPJ:]3`VD80oHCcY]HLh6=i9L)SM";#-$lMBB8BOc8?iQlmUW%$&QqO:lpg5?kRiZ5%]2d2N7iN@8B!E'kO3-MICD55-DF6.`&GPOT5MhrJ1TGld2U)$V9@P_O-6%I/RI2;kL,CH`KEKHuM[7+l&)q%,"5RfK!,b6!X8F9#>rgo!<a/h2lf2+U2"d`G.e"<VahgU/<XQ:bHr31.)q<unGHZ=5f+W<!-d2[4t,\9'$9U&m9j&/k2M0o#mOB5%@nbtrle5c*l8#i[h3;mQ=+h9EbZ(B>aaYtM'4>-bEu`Mlisn%/%CH.5Nr\H5EL(e0Y!!-SGLhGAd*9\_=V*W$:TQn!/,'ogiA!o4%TV!P8_)h_mM-9Q!GLm@SHd3!g+;a>W(k[6cYhYBc9DE`Bi=YfdS2p*%*gT'N_Y?+'/n)0_[_YkcRJk4<fJ=_3jV&%GZ9AP2_oQCO%l?A\<:Wd*);8dQ>!,LW$*3bn#JNN.@qr,Jj"4l(j-l]e^EW^aR\%*B@`q@t[G=@:*n_C.[.J_=EVI7u3eJTk>V]o74(EGmVY5M3]%k''LjjCi9Nq<d[&ARA/>24Ot'3]80Kq]-7k/R?PE2NY8Z7g%=-V#^d^WBb?J6_MfqE+a&d&;6,VSmqjCND?_9>E$9;_7\hnQ&q5@%638tcJ^a)1"L>BpKftI]$3,5-V8`7Zgc`SAjDmfc5-4Z04%AWn=a]j1jOA4Q`,ka24mo=!Ikgcp%'[2:r<3^1$!8!C`qW7$5;=jU%h$fDC_c9tS9aQunMJpn74o#JdDB,_1Ir^,,@bg"\_R`:DEm09!4gQ+nF->-ffFNJ*1<\V96*^Qi((44k[MiUW<?t;ZBU6[uR%/p:%s0q$*W/"n+!!Z4fMLfU(.h2uh),M_^Wl(Z@*K]>;<Rg1%(3fc_8mpF-%J6A]E'Pr]h">O0mqCgO0_7@5QA;@NaSGOH/pGgl.N-YM%@.d5lGU8P3+::<Kr&&PgEM*M]bjU:doaOT.iU+h`.f##KYj!iH2h3/UQ0#P:LQ<[b(9ECMqS/Sm!]KFS:T#=Lo+qMNP5kE%nZ%8<%X>XMc!@;&8@&<)tA>"I&=>^0]pc;.f?R=eMi.4^Lgg><0IYr;n<>`enbP;qA8D`gf:EI:qD8o?e"ZHDT;m?A*5)CsiREM37cs8jb%XB)Pg5uE.5;(tW^7?V"2rC+f:-o]TVR]8m[nooU4(j4"mXCJY#KD>1<<><MqHJ))FCs`>R_7F:[8YA+rBn58m"%db\j/]#,p%pTn%+GnCTd?]#-%q,<Q:+]p+0PhI4/s$QRPEj%c]RL%L-'E^;F]H$CHlT4#XEG5>BN=n\5iMs=!njK?]#6[2ctV]+1Jg,VU=oqf6?+8[%?oc8+JaE.*6bll!5/K!]k!W'378cC;9V)e'..1,/BY/L@"'iH<kWV05ZELMg&.eO.'<D7B!(a2=((@^::takBgBH.Nn=a"cai-(?%pik6mb[(OE>kf0S71r/7DuoAOpH3RE1h@:1S)u(I.,\KtAsbOa8Kj#M#Yclrh,-/Y(f29F1m!*c7t4rte[S=]K<*E1#7BPEik'%m%NVL8Hko'Oj4[DQ[J?cPgppcbVBiVn)K`T@[!/:6srROoo`RcGuYJ@1C<_,nLP-99iAo+#ij8b"(8cs:X@5\ffo)Z-p(@Z7kGI/jQ%'o:ii+t;FQ>SKtcIU44K/S:&mqs:BM04[2&#-IO3,ekQ2e<[G"]CRgC@,:>\^cqq^4mj4*?sTE7"tj;*Xb$Ea8@,eg.HW"9f4Q^.%"0MAuWBo*p!NX9J24LLYCjl/"JDV=(5V"tY$m2rnO2-qTb+T^$Oh0^A2CZKIH?#DUFt6TO+F8TL.+WoXJ\I6koDnMV-3l*t2r#N'%O7m!iAHqc*DuWlUL^I>eG\*0'dift9jTr:\aFI:IIo=&pA9;c[I\e3h%7:=<1'u12Q_jf`jf4DN%!K8.A(13Wp,Y"3"PG&S*A??i%O%1j"d,mG%\;R/SF9^_:YiZHua5&UTa2Lh"a"hnY;\J=tF=s*S9#eo>5QOE,D;B,WkXP]?nJ8&YB.S9gA9_#<0l1?]LDZ[d.u2'*%&aR:>ecm9&JR,T7@#rQnY&^tQ`("$TJ\1bYn2i+r#dC779#,h\'b./LLVL':63eskKJO['\oJ_5Z*fgBf(%FT=cFt`h;8HgWA:EQ%7NtT_XR<boZ!R3RMbkIrZ,Us73b6%JkL+^f#l#17LBlB7eV"A're3.V$_9WBKR^+DghhNC_DD3l'%E^>([c$QE_*h#`"r<*QTXcO%lh)ff_[JXsS=rT/-^8+b:C\MHJPkIOVD*Q#4eu14TsW((@<QR@a8&<4`6g4//o5\n]uS@"Yr;dbjNMLkl,dIEIrH[*ib!E'Ws\U"%>@uL1XVF$<Rm#Fi$N?H\h2Sn$fg4))ZePCpK:@?RdC)&-1FA_9>S&%dHVeJIU\"rK7G.P!"M?9?;^B)8bKT,#pRUR%>5`7bnRF4O%#N<^>HZ-[D,h"%m^QJDO\qQb+^:Ar<9C3<O:m2m#!&VG==_Rm)m5IC4k^I70Y2!TXZXc5R.0T)Idhem8[L*lCVldaOE^.4o!<A+=%^G'Q&j^+)[_E?nG_UQ01M[/g,&O:_+1l<oM0U<.WH>EiJJfD_GZ&."L@h5*k%[V$Ki:__WV%2XtO(&r)f]8LIREnbS'`(j^b[oQM%P8ZadLn+q,59;jAM3%J:i,*nk-;/gaYSj!"F;U]'BM\BqGq@Jd3f>a*`pNMbd6Z;:cHi$n$kl5-PH3)C<qn:RDe7osEfjS[m4ZH$%o)d89Apr?!FhM0TKb^3>embkf^jNuL%^&En2d"2)Ab4-t=Ihm!UXVd1@W?YJE9u/@g0;hUW1SpVaeF^i'c>2+3=0g?iorkR.aA5B%IQ]0H;Or@Q;\>hl=/YF<Bm0MolVNPkbs4_K^]P)VKkK0,G%?-!FlqIk:XnuIFt?ZZZu026i4BhBS4:Udddr[+[b,.2c^nlX\V?L9%OdTPCTirB&3p,FG\2b@;^gthqlrT<d&;jmREjfcdP$];>)7h4t$I!7,c_c7RB?X6N9*uR$rQ?Q+#d`B96$9;$:29aJ`!jjh\PT@H%d,DPuVP(n(JrJ39amtK0/K.gZ&u.mbctnA'#@W8K.PP&O-F^uJT4HJp`SG4CY,i"V9\ikS4Ed`0fqR74Tit4R+J@?W3A9MJ^?58f%=n`]T!%?loVc"]*$9`"W<8:N!0C:r#k$DZRfd;UKkGT8%NP=gXVFniun*Y8S:]>MdFr*aW3@fsb/EP0&K65FX90:<`Q6CIHcJ]fH%h`Y67?BfLX8Y3M'MQXqq4PT,6dKqZu0*1e/H/uH_WYYuYjt4;CDWciD,2$S%54d,bnG@9T]IJggENjR/hqnN/iqEQ#!?cmklU0Ee%6F@,Uo9^onp4>)N^A84DDt4Xao1qK4G[.\9g+Wf2e;-*AH88XK1)s(hAVX92Z77rESi!C*mcHKuhF;KK98f@B6j4XDL<6GbEj58@%@R"P,Dj[559S"]\2CMq9i/,@9]k<IC#.*f0F?e;K3mhj*^iOZS*5LLd>"-gPYGC1R_;est4ga9<LI!G?mVT8]8<-Kl,4X"B7LZ5U%0YD?RR0.3`mKrA"r#qL#m#jVdPj:U-[-JUe/mZY$6<u6@2n_-EMO!1%WXpi=9u>OIU0l1[!!dKOS^jM%NpF3UgA9o/7sUTMkE`R$%8&6.L0nNjl=U_7[s&o;@[V"PTm^*R,65N1[mCgnTN6-+B8HqN;ZggFb8o]EgGq;h)074JVjbG.D.tM&E`.<S=1SV$cblGk8b47S,%EKfLc0\D5D&!^B(Qe.X`Mqpt;VDM.R>SkJd'@8U>:0Lt:iXG-(:0:h8o@QXX97(ZpSX@.$FRlYcFKdCEMs`pT%mtY=B%OXX@s4u+%-*qqXH%]OAB(u5d'?9O5i4_ba#5=Qua7hCt2cP[=?,5fPN:iH&J*d/m./8!UkYFDo"6S^fd<6gg%S2s;a!l*S,j0'J+Pt]cZN$/M%/@D56\NTu6Y#<5Ld>eB:a+o7^s/]&X=Y\S#G!$K+kqh=/k="Hm+eK>g4)Nu>,JhE.NM1g'(p(IO`l?'7P-S07MiV_`FK(H6^*/i=%'YE0k:A7bQ<]R7c'<Q>F4hiZ]*(H8SX5;M+:)DkjY!25iGq7or<5kiKcu9r7bKhE*Ud<]-MgBrHeus^d[E[9)`ShC=c8-/_]&ik2%G.KnF#/)9mj-5:1n1!=.,=J7t5*=U*V;ZIV/7ho$O%+dj=C^P.>CLF<pcK6@'#435<jY\cq@?:_RW`e>bs+5YB\M.G49!'Q8(3L`%p]&?lfA#DtcGZJlLD9VU-XM"Xmj]!3VHo^3pQ&!1^\7]TM:\t>[3qP%m<<92d8Lk"']V)h3"-c><l2?*(XWTM8s)soH:XW]G51@`%,)S]A.ai@?LN[ZX0T=&8,=mnC:"EVS:$U&K7R:IMkVma1G2prc[mbW6,j\u)HN"X^U"4GfUBgtoS,&bmk5Ec3j<eOskC%>(fG^JV%Or,bH2,G;!?*pGp7#0Fc?++R`1pm'!lWaRa-"2SZHPkfG#PT2-lf<M!hR[*3E<rY46gaF)a?a:]l%n@Pr\tC#k1*$G[X\U-!$N;-%VV#rUm-2>YZm[8%[p?M4>e#F@nL7YjM,j9V%eLN#kY&,#[L;]tAu9rEp)\<:f,sL_Ec)uT[m"cj2HWEbUs&JNd!`-S@XGG#6AdeE%%'55,ja`]@a6nW.Lm\cZCrqh_'+d]BZG>ek^CN^<q?/"XnLWc<0sX1q0Q!Ba+(>lL#>LcmU9!_8>WB1n+p9YSFur1s,2JKF+O1t&%#n,669Sm^PN#!#XHVY4Ik8Z@N#aJ3Sm8)=6+$e5+*VPTtOlhfOJq&i>M(ig*eG+PUOIdK%J+fV\8>$&U0srW%go/bWC'Wtt!%uuH%DAVL>(_QSOecRue7pQ\8A_/5AL`$hITXH=-]?%\Y4\!ga*M=7NU^M:^ecf`kk?(;Y$K[<dB.CidVfS]UYI'5`o$l47Fs,d:8I(&\%L:RrknluK2(\=K5$_t%:(N\\X#Me%"N^DTV^mF>mOcD(RLCTh0Q@cSWM>6W]VQq0!8q;h3(BRrYOA\a5M5;M!.C;U#0)?N$98C<1%=K.ME8)+'.[kl$6)H]#<4E`2c=WVX_nX._#iXg?.M*ZA-dm?DKqbC`7LQoj)6:9Zc<Bf$n0o$[.)'4DRNGQ$<5$k`Or61M7$`?kD%-dp(Snh,1$4ECp/NI23^S78YNjTn;7m*t/jIDP#-?R$e^Mu4`HS80H8C/K@>U2AZ\1cq<*%cMLtroPk&=,M2h3VP7]%Zri_h?-sB%Mm7Uj.Rup!mhHSX*e0;bN)&Z$RJYY/lR.\Bij]dGdts)mo5GF,Taq@!U1B$=42BI.<t_p\I<SB5eP4Eg.;.-2s/u%pDst=4dq6%r%YCLsRM6Z<D(Q:*!?lR_9M+_)nM.9fMnssk$3S4842+8DiJV?AdAFDJSrG;cDBf)9af!@E+OhN1*>?35acs>jq9[,GZ2-A(@H+5L6%_YjCR\QRfs=?:C"1cM#l?gEd1BqhuSEV>VD$Hr&PmWcUGYF:O^XgMV!8aF),Loc:R:aIl,hb3m$^Isr?A&4XVWSsX7pVe$XCJIs"%FR(7r,j2#X);pIUGLfC&M$5t*hatO5P%Mn$QB!>@X7%s->8qA"0<fSc].Yhfjic4Im`X559)@gDXiP]&3DXgkoCN.@SGkc)Q8FN=%H,11dU8ir$Vbu:%[d*"s<LW?\bgDb&cQm_9,Z8Lm4Y[JuAM5\^RA4KG0)(5[^KgY+.mlO0(3Q,KeVuG-PO,k"f=R6WRY56X]D-75%,c1q[W/"9Da1#WSWaQ5#mQVH.7'kBn,GmD^RV79t:@HPT)*bqLVjBfHO.P9gO?U+QG8EDGSFm,U6;ZJ-:A/*lVD0G/8`Qi4*mO9+%dE8/h38_\L[C3Su[4B\b"O`f1)nj\UkLH$.rp*FH41DD9FWjoPOd%`QMZ=-I+2%Gs<6h*s9&iJ0$N;K6]l0B>p$)FkmN0)PCAN6G%8`*tcn'5)K2T'QA^?hE!M,u'p:nH;9PB9a[CIoJIX@6'+i'f1%PA^kRmp/UpB=hmdV@,Gp^S#+l/+:3!4B1FU6A<iOQLQJ<@C@!)%/;O0TVC:1&b4&WPU^9(3r!m[bD0U\OY[REsGubF03<3<2Um(_u?&?4f6`G0DbKG0VheB^YFqodcX>sFJ)X@5uH[TR5p0X:7P7^A'%LGA82rMJ#GCi!LV(_^4CK.GhS8IXgD^a*uTq,bckFb_E`i#q1MRk<n$D(VY<<8*nk?$3cVA9N<tm]Q3Qb3`uoaIKq8/FTT?bmD%9%jp%+!`=hQi-;tTmT6d*q%@3\c0.r,D3G9b$h`^JQKN^iM-G9fMjmkf;1.Jg)bY^K(o^"Bjbdgik:SVq1n(h.&V=m>MgM6*[--@7M%f,<\je>rgdkN+kIR:a6XQ--fM'S`SAR`sI=?'/Y?(r=]+abWVBOdZa0*D^`BZBtsK*RE5e1Jrg9C3&S,nmO\KWKlR6GBuj+iQ.r@%m.>>eNbG@7m.B;jO,b-q:+s"UO.5'IW$1O"qTsI\TT%giGkS=+gW6up64K_m=%LQn+=2a\1..u`gYOIZ]J5aM?nm5=ok`^@>GT&K%=Nljt9n4.2Xco9H%Vf[>"A3JV=l,u+btr]:?S.DA&t%QsQ15YT<&o4`>BadC$F;QFXIBE^$$Mopb[6:aWY_TV>CP;BFkO;UaBc-X%!G!?"/*GTojZnT$R/SBSa-XQu7m[F`#t7PS<8hY-o+BHL<n)i0f+r(1FNd<\gdK0Z,\3IBWQ3;C0!*78$IU:0ZUM6tNMT))qfrp?%:UQGYp/)"B>lrnJ4DlZ^msCsc\W_tRA6mtiYo+LE.TI%.eDMCll$?i?V=iG!%2SpCZc7-s=Ck]ElL$9u]PnQ7@&FXF+h8_#i";#o%&D$qp+gsB4A&liH/mY=J%Z)H'lb>!^$fs\[\\GEsKn'XVJ-080$6:`?b71TGCNAVM!]Z"D"X?>=T0+)=%9*'+4W"[$Ag7fk&`,oj%f(*bki?_`FVXe[;B-U_APKUj^BNXZ!l/H5SC.jT)6:67WRD80[**rPQq:#rC58,QnlNK?KIYC#bUZ>m1hEpQ(Rqpd#rJP^M^L,eY%>+E7(hWZYf2p(e<e*J'Vd2^pY-`mq_bEI?LW$;&"4t]?;OY9+_'F@O8ok^pkC13)PNXf4/o$Ua27R)U!i/#jOQu%@!:2_=6d0.)1%9-$c4b33YNb4;J5`.@R6dIi>bE4AC@WDQ%R=C>;UJY2CY3cl0n;`XEo8tM,bUbuj@*LW)<Bo_Um[Jk1KbTiToK(-=[:AEfWeID!^%Y&M/jD$:Rf"TUE(%[qb_8XZQEP]M]#;8Y[U/7u[\('QQlonIkiHjoVNeQ?mGfjhl.?uQoHEn10+B2"5_3>fbCO8oj/?,!e.M92%e%e8V=P)jmV>9&%3jL@XRaAiD<Vp+YO/JQXYXQ$27>8[rO<inA;n[kH]lFlB%U$6k!f(H'"dYEkGiEd&$-Y*t_ZX/jgt[nORG;A8Z"%eM%HE9(Kdd+fi5RZJ&UuTSB\<JXl\[W56:Y9FHPs':9Q8Y%Jd:a0UE=69p<VS<lW8T=MR`8uAdaT0+Ei2?RDXAo+:4i=TGJVGTg?%r@7l&XU?Gr8:e`nZT]UfO,#)\Yo"p;-Ak2@(*eOZ6pW$-Ao4=\dcOqT>="m&q&0VhF7NPT$Ha!\=H!qX:mOX@f&o`"DBPlrp-sq5%o+HtD_Df/'`6c_e'M]f56/B?;rJupP\RBWuar2_iJ[2s<kC7!T)6rgaJ/LIqrl@QdO44Vqd0bXHWZ)SMOU;><K76S;XJm5-lHQtC%h9Z1;dP?@Ns*P]^DJ83tG4tg=ORIcL+jtD?=O=ri.X[.qQ>Og9k%toSKF&c>@mf\9k1==D#ods>Y6,\mQ!?rc^mACY\=gJ'J;usr%494D9p1S:MbdWQoB*f@1kQ%LTg1,%Y$lfQ<RgqK4!"QO8+$k\HeI@AbLR*hbT8iForTc<*#)6PqYuJ6'NUW:>QAV4Tc[Rgc!bW1I%REWHE0nQ`oaHW&C(%1^?D6IrIhhh<nK*fguc.NAVH0[jS^ZUA4>B'*\i0@u+O2:`HE]-g"0YAku,%oqB"<ge0n-8%uD4TOd,8\Q!%($XQG,p5@.m^L"?q(7_eD.Jq'b*G2BMj_n=$iG6\dd(5F%QpYn9rmKJXY$]Vp%F9'lts@Vf3)r%\X;Hc::@"lq[6<MV$Y>P[5#%I%42#4,_6],eG7?_ng0!1;%-r7F;_msZ\u]#Z#g!nM0,$.Gi:lQ7h3rj2T=3s$!Mj4!Y\g(`B@.H1B->c;lds74mA!>>D&XnUc;:TR%PWo<6S)!`J&+1VRCWTM,"ksoP[>E:_m0ps;Y.4lNChG0IEo3HcecsFtc[J[-r./%kl_ZplP>`b`<p&js%o1.B-hG#mj,rA4rq*kA%kb^VBQ[@L^@Rm&\q(i@F6Vo!^s2#?=Y8EhYS\EZD"0;sU@39(AKrq,REA;s?$7D;!fdjt8npRADn(aKmjA,0P)5%C&`]>)2/B"+N%WP[K$=(3ec&N]>[L=_k-.DnGt4^J>\F_)Ate=e)Le&sVMA4-f&Q4+naB`lBR92udk;@C<,"m+3S7iC`qc\Ze6CCR\c[/sI'db'4E%h6*O?`W@.-.k@ai"0FRL3:cF$iBE)62=N=K_adA'PG3e:j"r<!E3]Vj<Z1>C%#i%sV@7ZF6WhQo8B%;3pL+9MGS#K_gkQd"fq5Z-%gkQcgH&9X1_-?dc/e8,PWPQ0ak+U^B"t.%ICmEuZ\\=gVO,Yf]b(/UV)iGSQ-O6E$iipR59I],oQiZ7B@ShgV'F(Y!eZ>%p52\[[%N2&-f]ZVgnLTRaFM1:h=.K_4CB#'_EIN,0nDbsWt;2&rL@E.$C'k7;V\7]g4htAS)6I0GG#gdS,/'</7.k0"aaLV1S<QV&")Qgg#%Q/VVTW`[IA)iXZ#6aM(BOMpQ6ESlsAEiffWk>hfR@Dej`f'oa<_n.c.Sb<@+S!Db-aE^$m&`C).0D(f'5.]k`WDqEr:1ka*mY#%j%!B+rZof8G35<;PgC=YU0J0:)nRf:ZJk36Ob2.WruS.=UB<5A#liYZMNE@m:k-G@0rgl-ZJM#9$!F'&_*-)AX]3erE.%3pua;`TVu%81ZIT#)CsP!4_ZW=j<d]o)o)WbTH]>nnOk@[!ML)B5=W6]R%s#j=WQSlQ*,a8,hkc*!2mOQJLX*Ur4%u\ugI-T>,.`?0t0BXg4_4%4',26:MYo]*F<C\5O2XgfppH,(FUf/+]+O&-2+p:#86R<d0rf24iG:0jMI!m.D!gKnKL6r9B(WE:2n/99r',)i/#k*nQ<j=%\@"p%36/n(0$Z:.;QY4lPXltq5'$Dq0O6-Bo"9]Z9Mf]5gGor`LJp5(c>CQ1d]F>5[g,@N+)hX,CL!7O88@F)EC4%,^2%`Bp>m0KIaQp1%DJmP5mi*E5"nr7'VpnUpns=FSJ??I'YSA.(8!&BHq>6b-BJZ-3RkG0J&^t:3lpRKkj3Wd3@0il<mW[1VngB??c`%:Fa+g8N^k@^r%miNR>*',A"5suesfhtSZI(j@*(n@tL*'^p&[S>mG8]J"2reT<<ea^+r9-5?j2mGnqQ0AR;/*g:XEe@I-j?h#W?jUeHN_lRAoP-h:%bQDSrljkS_%_]DF>jS8Gk!MjWX%2(*BYL13?W9O+A,m3W(bPN@`&<(0K^t:Jg4J_L,)@>$#4ts@!%o&r/4Rhd&MuI7l"7kFZL:Ep%1T2fbc<,2<0FBU@pb7>u<nbKj+Y75]@,W-,j:0*;BM"_ra)_f(n7=PLJ]DgCAq6dQJJuC7#+2YE:d\?^-H*Ye5Rh.iRcAB(#rRCT%%,t$Rb0i0`1B9q:!]>Y%?Jg$b$'^RnPfTf^6d2e4`r2)GTE`Ve-WV49p`Wr#QS%,;rEU='hN<l2=SgZh@hL#]L1&6P<Z<=G&2N1<%6huAE\G_3sXCRi'rBp#jp*fY(.W'u6b98YH1qP3n-KK_b*G$*k!idKsiVg5:0f8u40#lZHEp(!7_.8e&k\0lLq<Aj=@WLZ*=.MC8%33@4FrjC^^39@*"dU*]p[3r00Jo=po2:[Ho/l]D)DQB%&bVnA3lbZJA2"Xu8aIVHZgOgDD3#5;%>HMh8QK:m1='aNN5BIJpQiI_p%(-n!50m`&6'+5gprVfdd@0Y?_&d:.G`=1&W7m[Yn0uK*t@Ou9h),\k5mh-WuKZ+?F+uM,j#`BSIAe@BIRL_3)PS?V)RL_1_f6NuW%(n)O&GUaS*.gh>JC>AMD'2a!";^:->O\nJJb^c/=kboZkoSOJ45#@!]*)ikX6=:"4iLLfCeD;S$1f1!d;+#Wlc%d4urn;a(aX4KY%466q5Ci-na0&3"^-djg_&(Sb"+Y74:,eaP_+UhtmhPh+UNgHZ/Of1QOfhWnaU5#n>6.#6.U'C(tkV0<m<H[9t$"a<RmfFV6?H&k\%,rpJOYbG\%(7DWUYiR*MLN:so"a$Hhn'3EdBqWFT;e]ks.WYNteA`?A2HhaBV7$1#Ve#dLK-fo+FsWb=A$#"5ig;\hOU)0oMc&\P%a<ra*'#R*RJ![ZXbXU<?+JBf#8!P)dUm@$!^-1.dI<-q%38oYPm$(4^jgfL<F7GGi:7*^/8`&L83@=7)N53q6k*CBU(B(C/DA+bi%G?p['7]"?p'HYBG`;I_c7,aVU3^8c(#]Umd4;P-t#]UoZHRqY\&^J@m:&$]fjcn,TJ%SR\p*9k<\@uTL\NV-J>[bYXj\Q[#_@uf7%''G/V:P++[U9k9RD<*?S)^rh&Mr!?@GLd'%Lj+K<o#Ki*M;$?j#m0\D%pc`\fA7SBM8Ukh#TW\1;^S8*muF%D!M=EjBqoBC7A%ZI%R/HFGhO;5-o!GEe-bDO)$i5i.#hYAZc5*C*!2et[MaiRM>d1Wa?$3pH9b;7fD5=W[EjqoTb/0)@E%noH&d2/PE(=6@Og<_^5(1(q%G3"EN42(gu"BJ@foGA5EN6XRG;1a>]AENeN2r5q1jY&>7#[lAXWV!eGR2X0DnKnMQoZ8g7#TtsjaH\R+@QZPae',*7s397S$_Ku^%:Q@:u!1@0Gamg\`E%4N+/rMG\!Ac.'&?PlOBnc'EZrc(&,55/FRip9'I79/a;V"f5gqHu&;E'F)?>!rIn>R@'"!</X_P_9:%K*HI%!KI$#dY<,q&#gN9+(%;\0?Sq\NE/"!Iht.`]eWcRc*)fqfLXt*(D@fa)Lrms<e0XWliEKbBZ^))AP;G,.i8;,e%=n&7Z'g5=1Zj^%44G.Bo=N@=T?.Q#lnA`r6FtVA:9?h5*+[Xr<Q$pG\ZtRaPZl?fMfFh?,klk^>o)In<.n_'3DXOCf=.UNS*QEoU`s>^5F1()/lSNO%ciI:.cX(5)eB$pqR@7LP+,_j25Jq!;n/Q`&F(9&PM,\ko,JGXq0mSeh2B_W8M9BtY<L4<"Js_L9qufN[?:+JJFQXt!Mghn:0X?[6%7Hd]\jN.[[;\=2e4[jLK`-\KO6?0TU/GUgcRL`d"8Z]Y]/Na,bH._oO%+Gd8+J<IXCY3UB+GSdBJCOb63M1SCE[-8K1XQ&c1Gi!o%@1sTL^l0=,/nVm:F&BhI9q)DGd'gY;Fb!ooH6Y-HQ]W:5"f<F1ObsCB/Pt@J2=&%8<<W@gA[?KF?Z"a4)V-XY&;pp7jTEhtk2k`_%gcm\t8IhJXY-a).:$(_D_X%cP.],iij/s,3+&#W/J8!o=$_doX),N[5*Areo%-<1uUJhsbK[6\1KGq^:#%'4-9_>s7R,K,)o,]bH%5J[cHr\E2K7%"K_'.b@apDe1@)E]<(c]Kol3[5n(*]^oObXe7sD"tZ]!Qq@#Dak%l7pq(hB:_1J$>MPJp0e.:3'gg:m(]]u&8HbI%I8D<=LPaM;W$*^(!6RM0C']_8r"s%QCBJt<>9O`BJi!pW^UpTM@D7-t_@0\M&;1tmjkDIT'Kh%X5lrT6X/P^'S#X&]/>-(]nN(FM%'o[[Q5HUW6@1S8?R$d<@-!akq2apG.Ej5Y\_JJ62?'a%p[k$`1qth^$:s+"f^?"-#5"^HO^8OUBnu^g[l/S$`\O.^@&#'?g%dE?@%;!sE,nT[BH[>_H]KT*1cb^W(lU5[-%'iDAc,C_1ua;=;k%XV0eE-KU&gAQ.C_duh^UU@U#Za7%H[k!hQXW#'?bkI?@Wa-uUR0dT\%G*eN>%a8"pE^[,WT;TSTZd:Rlq*tcs6[^_JZF<GM4*qtV;R;$AHOO2tAFL3XCD`5;S:<cW5o<['c<J&6XEA&ZaV;(^YQ`=<jM(02%QMZ#,QR8`ChN9<*qmP'^Eoa2W[JkT`"#op7,R5B<b*Afmdq9fSRAC6?Rd33jpIaX$hS>:3/+CpH<UTl>qqON@RDhD+.q]\/m[THQ%O"`Rt\B*Xe@gUV&Wh/8-*O1m8OE`pH=A)fd3:Y[UK9$/h6qZH84*@B;+_Hsjr7OUuj+uQ.YV*6i#9W3Tk30it&Iq"QRk;FE&2pb.%Ht@h?Z/?Q"KCcq)\h\eGYDfl:1%++);^dCET?R8eE`74hH*j?QEu4IC05@Y!E#8.lZ[$VkNUpfSH*^50iGYYm*`b/EM;;d0Y_m;"%b0&Nc=*g^TC9L9o[a5<h`$5Oer(eJ"DLp)Ofo8#oVi3S+Gb0JLgALfOoZ"66n.N>bOr_VMs/=$,^%FLnaKE&A!_Vf'X<LuA<Y>,_%o+$oe,m_6#97G?'p!RjUlUq4W.[DGn:V391Xu;Rmb\9:X\,LN,1i`abkPQ[KecYgp]12_K!8O)\UKk3afn#G1&=F:f\F-jR3m.=9%hVKa<FnXGKrk,4_OLj0nMK[be]-)7=bF#%Ycu+h)3NhYZcD*.g/*;4-E&*)MjIZ#@W&e=XoOG3/:>ebu[4A.Xq"$$?fscBTi$[,V%0>E1EDgSGE<2o6(fsguI[F(o"<=8df0V=Ld)dW,$3M4`%!)4H,roR.J-D/^?JGu$6.>E4BRA.UKp:Ug.D.E<d^<-_kf0OoP@V(ta%lg_Q;D?12om1M!$$%O8.Cm9,)I".koa?f>'@\iL0C*<fc/L46.YQ[G!KkY9FkGj:r3ON:.^:;i5Bnf!<O0OP3:F#ZPKCV$L+r?\B%ja?<miJCfAL+2#-DM`4UGtC$B*7VLjq>k7Qp&Z<ubM!mhA)"&?b7/uI];o\[db[:mO0+q]=#tB:.'9a6$Xtb+>57Zl3hj0f3aXMB%@,Ama^7QV*CsKNJmeI<()$q,(OI/nq,/3H&:SY6SH+bprF@;KUQfFG=Ls[Q'e>&F+/mR1:`K:Q)hTl*NF$WSAbkF%4oOIsua5:.K%n`GH&D+"NR(m,_<[;$LCPF>`2<NC;Z"OULCG7bi#TESs=`;Hm?prW.T;R;K^`_S7MP%(Flm5fT=o(=01M!jVLrT87r=MlhR(%f2o%`nVSQC#\R.OLsYtDCj'SJrQtT,?"8-:dZ[&SH^%=[(ndf=Oug.*ZmBt/X2/flmKr;Vqa9qBYd?um!,V',V8WHM!?d6HC@MWZ8J8p%3K%Kr1cr:qG*^n`#h@]A1LE!5>9ebq=IclS't4^Fanb'&@(l1'D4(;s>OE;F&aR,JdG-#3gC$8ka5+%7p#HKVQC[+'3c24IWG)%M%h60jn_+O>H6!'2^Lfl?8nA]9lP@V5^9#/@BA#PW]X7&i9T2IeJ.p:0#0s7CsB=k#>nQo7As4&[`VT=LS#gA(_..R%DP77UJs*42A%#Yk,EH4D-[nmeVYeTCLPF:&<ScnJt7fah?g*LO0Kk(1FQ[V,=-6Pi"KN3SgcAat7\N7CnaAVjC1.fQ.5&mo3i;Bp>X-.jVOUnt_+%:<7GSA\m57qrO!e]?FdK.qs[`PM@C&AN((f/u,u,7f/NHi*E5Y*pHtmo7[QCN6[N_Jgk$2!,C8!%U-e)9RM-u+p0GL!qEePK6!`n%o7ECWZ[dpVGMGPSg6C/UHe7#<PL_Atg1-Y$LGG$o@=B%*T\5\Lh$+Mj^4Yok$-%DD+AROR6=g<NV<kTDakDdqb=LW"GZn<?XhT6P%$h*mll)r`FAe@E"dlnb5>#q,$`cRQ31Cr"HCq/jSeO#'?U62G#8@B2Z"YUVr4Eq[Y"]+HU`DZ\8YTlr@^7,CTOL$#h(KX`*O\!aD%\Rm,\5X2*ES81H"&+62PZ23m,<fNO#^Orc2?g['QfRmiP!mnu%D'ajRHSG.QX[t_C!Alg/?H*m*&lp&T<9:3>^?mR$p=/b;>jOaW%5I,3S=R8=-rtIn))"tc9,fcrX]0auIqlpC.?!DtfrVSj=@VL5P&e\@IldE+!,u!<u/J2[;I)%e`CD_b@aHsB6R#L+Ej#+S_f9EUs%`[4D[;K!B:/H$I:*\B<)+7.fT)*lVB)rCU0D/0#H&--^_TVp"s3Z^8"9B$A-pW&MJ*?AM_+_pNA%ZJF:b^XFYNQ&s+)ZKqiR-@7H%j>kmg?g[`#&jLQlaCiGfV=#8b4/JQF.3PqR*\).!?sRIe9,fPgN=AAQB3TI>fNf_pSjbVo%=a[8bW%T1>sm+HNHWrV=^'26Y,Q<"%;!/K(O1E4ZRI2j<:"_+o@o^b<NHIZGKjQ-ng\q[P?*9m8:/r8,_DZMJ\5#UTGDiT=,kT4Z#G8#8a3?f^BcE>`1=">u\gq:akb#(=%V=/3b6F*o=r%@up.SCCmK`&STA]]uq+[='@o@FXr8l*M>Tg\n`b5^',nrNNub\*\t6KYU\h)MB-SQ*3r!.>u*rV,l9N*)KO'VBQo%ZYKI,j=;ct.lYli13/c*aFG&Up%^(9q\EgQd"CjF\hq%8q,SGM5TFVbK<>6+94ES&X"Mnu?@P&>nt[(6%=KGP0iHXt2DID8`7<Lj%\*bmM;]d!pUXj/cYqC+H-<6dcY,8Br4WZ`t?\KBULJd9/8C.I`VDZ7fj?W?&@X-oA7K04^.7J=\UR49c:h7H"&oi[N'DBF^Y;*X%%Hka[[)o4Y!MRa]CQRh)Ja$lklAC$hJIMe+eLe]CkRfYh8I"Jo?OKEW0peXJ_TD_q;kQ,N9ZbR+3d0%dVc2^(f7h;]DbgcDr#X.Mo%5.Tm.9<Zh(LEZ<J=WBOW,(<>g3]("_\?G7Z`Xb#QX/^:5:"ghK7gOS%kTOH2J[L3&<aG?Jg<j']L[jR//ap$]&*)&)..-5#r#g^?%54I*p?&e+loT2Vg#!\&:%hpJ3PA/\0FV@uV@2D'PAt!FY'RHG&jJU$/j4To/7ZOB#(I>8]X\g*l*[8So9WWYmeW3)2j."mn.Mh];%DgJClm;*L6q2skaOnonZjG35Wg'/=8PA?9T415(Dm`:rko=^8mq@*$c:<FF!9:sl3,5CCu<<IjMl0"Pj+R^Cr2b3`/_^29KfFU`.%`eT1#LVk^!b"(Q3+0*ccrDh0$)A&)5XP1Z0Ag^g""'6fr"-?mf7KXr4ns%doDfWgT4Z$l$8$9r/oP,ZPH]3-u)X1s#?(l"??:IH2%5A?jNM:,q=Vi4<60t!3.cNlS3ki@[p:*O<q^8#[/fo$X&pmg[WiH6VC`oUb"b$o?Ofb:ic6n2drq`m_8T'BQ[gCp?G4`PQ'R>kjL%Urt^1kbf+^OtPYaHEq20/kMB_72PX\%[!P;m?!p]929(JKuo5..O?$Ydc.--5O[kcJUT'(Fa=M@R!BQ-8XD)!(QGbgH'0deMCp84%QnM#I6"/0)FMT`s"d%cIf$sQYWIZd\JP!E_eK>+d8_h&a=)U3dJXN'WM^*HT..ZKa6!7LGqRRF&0u,;1D4jtIYAO++2Q-Co(HR)T%Mh]Z_SErq&+3(&\6=FJV+3((26u"XT@5N9is)t?H#`*2fK-*'t_L0Nn2Q`sO_r',3fOLt+Y$WEo<l;WMi]I,!Pr=0k`\-elK(JlE%eFk91<i:#fa&Z[Z*iu17]e\sQqX^7lH@[]3a:s>=?Z)n:Qh)LFAQ1GV\'*4mg[R=$h/DC_b1Q^-NN-%3:P4)M9,A%jT?G##05iLE%!\*0r!f$mL_i1`qZYFtRld[o9fgbRD^!p8okP),GPdqb(lD-OV9H$/B63d9`g/3HT(\BgQU]Ks(-1TCPgP68aP`:;+@nEf]B$d*^%:/i_!58YG)bk5]4VYS\Ch.DmrPSE*UnUoW+?^a5)BRfm5\(,;l\s,aRh[5u6=3ig([Qk_$fF(Pb+0j,4cHisKlAWO7r]28_hm.+,%^9uC?rUP;<BjJu9,[.]m`D^EFJ1g%kC&QsFNPn[aCAGDCVu'@;NuGU@+0@nC(4r#j6-fM%Dj,Q]+!m!8lob(&"43&J.RLok*c@XX%V6oqq6V[5\4*&&_:iu&5*A%$jLuVbafiaZ`gu2#R..c`@g$9!(]CpS^kQ&uSB>s0Qs2Cn\nuW;^cj*FAh-MHc3H)a,*pU\M+)19U%M@t%m4%u,4X.R;>S$r_o'#5f>YClMr24."8%F_r>+aGQ%Z\N'!8CXd&dTl(j`Mr;)eLJp^[7.(_MYrJq2.LqXkgq;+QTj<!/_<U5%fiI-\9E3]`Hmp_m?Dg0n1hNCZU(L!83HoBoNf&,>3L_Sf9F-PkG(6%W<;7.V`M6"Fogj%.,&3:@qN2pBc,#`G4)\b,\^!m-mW,th%$$UFipnPGr["'3A=$^Y9[W5D\Fg\pYbn>/$*Xe?3q('=^L5dLLT^H%"WeOeXTqZWkNZDY)*KTVZWu?.U4o+n$?Ic8ql=L=tGZE/5%+kfL^Uo%;Fru5mT;/>InNCR.%Y\Q9=C\:25lI]GfWC-[pX-pJJ2^7$O$u:"+!T*?cG@[X,cIbZ(d>s!Kp5`rHKSbHJPWVF(U\'q5%rC9=rcXWN@VEjtO)M@$$#g`I=*hc#tW6U"da%pj)jf.\:DnGi<"AiH@n>TdPqtag-I9ELsG8G?>_Z_&^Fm"EjD@&/4S\/8E,8o?i%f@5(<$ormo20H!=O]F@+RL5uH_Q&>rdg7PcqGoIiED`0Yk!P^'KjO\dZgiGrW%7bG>u(3V$E_`FA\m=Y^II^UbQ@h)=.N=3CqJ>_%ok5=.F9eq;eEb^iA`Z0u<<go3hZhUIb=bbnhb)n-Us?H/D3XcJNuN+`^1OD<Q]nT-H%)^:gA.%:hs)(:FX?_AbL>JQEP?SWpeaA-%#*2a"d7>5e.h%/Q&M1[cb=1>Q'MAmA[*c;&$IUbmN&j$YeMR?SVufV>X5m<IPY[;t,Tram/*fu*ctQf8*rk#TP$8CG=3G2%kJ-nh%dPgI<YYT1IgKegCVf_pG,PTejemP?C%9,::!KZZ414N:(EbdO3Q6,-i!i:Z^FlC!FM0%)h.@6:km:fcb43jic@iM8:2sE*#Q)Z_X%:-)#5\?JR_=#3Wl+F+V?:_!=*.5DpQi/:C%in/hCEZ]W>R4mN>/\$]p-L1`T4R!n%1FjN3R>!(u7NLU`24:F[Sjj32f"N[JrlGn-%T/5h)_2L*5=<]->M`QjT#2QL`I4IsK"t\Q#m!N2%r7L0\C^og^J4M'sS6u3>U4Kk-XL%->b/7id<:i2"#3LT/$jMCc6,AiWAt?Jn%`4eqNK0k)2lH^O]#*j\!F;j\[N,T<XiJitrEbm#!&Tg+X$W.0tT=e,jZQ5RTr<GbODk@SF>#"E#<_jr$NVIsQo--/RoM2GZ2YhKb%g)R/3GBpa*s4m<P'$n.u%3W1DA[8RlJXrsbq;4bTV"mp8_G007)Y?j"%Gb"/PEd_.KJ\#XnJkC]h,Op0;m$0L^<d1lWhGabhY=\@%odjDAAH7C[Hg.L;>MTaI.']&g6af;O.31r]M0?RS\$OnR2WUC2S8\(I8uD)SpD.H6Y2Aso5Sp_#C>?ZM51c(klq.Mce!GUg0/hoe%mhZuRqHWiTTAnj@4c9tV%3Ls'\%?ahna4G9l^M+@Pjb.DUNZ]sa=/KL^J5JY=\c-74L9r,jU?4Y;0jRigNRns`N2;#nHo&>WHNZs%d6gFr/Pr16:G82JWrQJ:BOY,0N*hWA,DF5irRE@qTBMNPTgW@=27!(PZF^1^8_F^IX.c`6BdtWZCit24WqEt^#a4=44im\6CCSKG%.S%^d7c%]eG#u4*h3;8*M&HdNqR%U)V"`RQLZAJb0!uf,c9j"81*4Xh.tRTE_ilq8Hte5'r@^St7cIQ;*)5kYhLSjF17YVijQIk)%rV;4+.Z681LO:hkfQCa6FJ[b??8nc6V#7*1?J.[7]%nM%`dp3WeM)VZ'GAYNbrT!0Js/VI*=I^9*YIGGk/o&U2lB;=CZ^(6'$W4a%3^c"E&j<!0WZR=9.Z4U$3Yi@!84g't*cah/eL<r[EsYL6\W&82T1`9!c*M/D9nF6RU:Vq&oro^qeW2F/NHZnZ-IM6[66tKL9VScn%LkeOA6DB&"1EtZ$8iQ6%EJssU^4/F7_gk8E]hV=s=\UN88<5%Dkfcqgq_d+p&I5J>euHA^1!??Z>sD9j*E3Vp@ue1obIqI5o?]b5%\n-DB^U4R?ZJAu)+Fcee\2Y[N>0(?P;<b(#eeB0jAMU$(i(s5C3bidtPuD.RQfpF7?:0SB`M`A;Q(chV>8\gMBEK+$VkVt/&%\]_%/,@s2)1Mr.HUlR/%V$#7h$&numu*3k-\%p_f5GFb:O)T&7[7$HKr4L$q=f`NqUgS?n#I"\B+2tZkLFQ@E^`*<s"r.9OkF']\0AfG%r[M#V=^,0.Z^C3^YSL#VD8,Z68S]bfms>[n&$#-,\>1`f[_7.DEg^G?-M2oJ,:b,Sb42Wj'84Hr(b=dSr1WF;-H0Z6SGXcEOm)e]%B-f?@PU.lp)1k7th=rB<4c2WXnmuaAU7>N69-Hh_d9MMr>$A]0Q%;>I2phfD4<"q#_9!9&!GCigT9AH>d\j%sJ7h9EOmeA)&YBep%Ai:$`8B4&k'<.rOh*R3:=T)B8+:'+;M<Q&:6BGl3,O^XJ6UW0H01hKuq^Sq"ln&]k:JRWeSWT=bMiT44,H9cu8[R))if@Sk+50SR%6s&Ker0l`+nKc/\+C#pc.,?O-.m[;LS;[][;KT2j#3fEn>qo)oXKj$W?F)qFG\@9EPCHCNP!F`0W6VR62pk-#p$55)_ZN&[ZhR`O%095`B=J!VBq2LHT=aIinIW<8D_J=J^%kP`cF.-%ebst7X[]d#:Q<mhqOsT6Yg'cGj9;TpSQKWkKKhBscFcmuDOWdS9?4T"Ppg,Q9%=mc=b9qq_e*p4FJRA7W+kbE5iM,Z$D2EiK-^r^T+g#Te@2C+dCm+lK*r?Y@8gh])bLkn(Z8lN7QPl,DW6SNCnGElc%BucFtc8!MI%*-\PCd-L5]dL2e`b'=9Spi9kR_%.nO+dAIUqbU#4h3Y0_[oTcHp.?^*k7DF;s*c2!2)LaH^oq>p0,IN@j`.Z;=ETOJN)s%Nl\G?f%de_6m.o;l9j$OGbkQ$IrDNP?Q@7`:FE-mC_/0m9=>5J/4r@(-nj>8-N,$9Cea$QLbY/WF/')gDqnmCD`3@Tdpnq8QZVBF9_+;4(L%=94PEKg[^m8AS^Z%MCp)<@3hrPA'T3p1kt17$DgT<*UUf$]-5,jJJbaP=MF-\*6glOJqmC\e6mNIr:?eraB(=o=^p(4KR\-\2\)$%>b!6kmp*%8RcO&aRFsV@bhDeD+aDn`kBf.5*+'E;4&V2X<Zq_nII@fJ)298moXuJPRV*@e0[f\jZmN`SH^@9OS?OFu7DboA8_56S%Z/,2&n%=dDEV\HgF>6e4a'df:rB4NpWkC<,Y=.80e7S!MT[i&'I.&O8>OX9:jl3RI=g<^qh\DuY\JRZM*lj:!@/flJOCQ<e<pm(,%9ikDJmh2[2LF3VS.)uh0D>(0pPJ&n"2hg^+,&YF2+ld['NZCk/B<7+6NlPG,NZACeoA1I2EV\I:]K9To]c6P,%HH*g3@ujXjElZ_%ml5L+h>(0#n&SGeFR1."Jm%!jF6k"[`HO=)c_)Vp)shq's85IVn*X[3bI*[m^3<,35BQ6W^<r7tGIGCk%>T$OQeN8)>s't1OZ7YF%.,)dc'.R#]!$+/P-:cJ/H20.KAJu7'B]#F+a%7tB-9+"b%*LIUg7'62Y!?;]8lLIWLHs7/`hj*h%Y:@n)A(q==@T'!T#5J'MB:&)%lJcKM[HZA;k^`#s,@XcP6.*me2FIts1anf'4Rh@o?EYR9IkGpCY1WqHpUf/aQEm_B6IF<&(FFmU6.)Lf$DFJ3=SHKlZcg24\#2s-%HeK&@L*Lig@m06DcphsR[(8mXGEMLi75PjAe3u0Crn/+s8*Zgo0'J]?$qKTWBb&Z2)%9%#U+qGgbRB4NFjZ&q$k7q9FjWOQf'*Wu%W)!mSM+-P)&DCfI;61mmiCI7]=*HBq_/Q2&3\a9[iCI62_>L(9d4,RsC.67?k4J^koI<nbP&o0ikN$knF<WT=_6@VUi4I_So'(,8%48N4c)[m\L<rs#^Y=E/=&j;)lh$55%f5F#^4?X/ud3$p!Rgk4o)2l\9_^3^cHS>r%%[TT4aSL./3a<:lURpN9l#93N3L)>pFLWSW%Oc%J_",UjFdIfp_(hP->d9I%qLJN[uU+tpn/tWW?6jH.E7Q)*X6;o$kdQS9qj;X_F:WE`^+k-//`aCc(d?-uEcsZ';F?Cr"o1)$C%W$sj.U4Z:cfdH)&*G%%MA0!knR7P;[XM^t"?km`pSZK`,khqWCN0ADZ'HQD4(dkS=T;"^">,PdHHbG4M??!u^ObsW.Q#S)8n0pDg%354&mlgQ>a,1RV$.QW*I]lnuA*>ei1.49&+FJ?17IBj?DU8,@pHq2HHj?=U*C$KG]X)3M4d>:hM4rsWM8j>%Xjl12BV8)hjrY+lP%V4ClY;+U>lI:)oA:[)@%S_lY<_:mRk>r9a&,kpIr"npS-,OTqO%3X)29<J5AY!bh3Oahg^Kdm&0rhnjVC7_NYpH&/oH,$,hb?l1N%S,H*WXldCZD#IeSd8midek0hZ=7<.RGH:UJ^N>WA]6KO`hS/@Ufc$$te94<*`b#RmI?ZmWME),&U$Q"sO"CgJkh-\X)JDIj6%0\=%g\'RI6qk/<BpbLRV*o&BB+Vlo"RZce$Gq4o-;MK9r50@Q&<%9`P_a%\.nIC@bPS"ISU*jL<*=<uf2@`A2Usirf)R\M)P!Z[*8ICG%4'_\NKt0jiU\qE>[=gs%"T5m=J-EYtpo3mgBe-[9Qt_1ZM%@Z@QP(T#3&T)sWJ"gr<'Nhh7;IKgoSb)%n'mfSc*p$,KH\7\kVqBE%db41"'8F^T)SJsNge-_cb?pG.c%?dZ>rYOoI^J(7ZJ%n41USlm'GbE=`m6MAp\'c\IUO$0`RE,\MKJZ3Cc,uY;[W[QkO@hD;lDC3%Ir;FeocF%OGn4N"<L7g4p/Ca:p<3?TC-tm*aTL8Um\t8f"GO22Vp$pZ85M9-M0]+\TRGuP3DCV+N>>JZId(:ca.'7uC)_;(o6(Gj%h&;C8l69]$AQW<-,[C9V6XGpH/MuQOF'rLTmj7lTM*IpaP<"U92f[8'baJEg0&oj43loXj?)+<XYFcToR0[ngMf:dX5*6a0/6J;0%Tdoet],Tc>X24'H<F#j?Z.HtSP8<`3g%rF9nPL97=KQ.9>4387G++E=\)WuqI-oOt7_@Kt%)/mIg<'&6m:K^?e4OZ-.^X%L5ls&k%:1inua^hu%ILeD@>.hu=VJn[/iHUrMmWuV=o.=c2'Wt@ARBS/M/ehcuN3h_L:ormIMgfZg+)fO[d[sH6I"J)"ErOQnSiVa-R3IMe%q.E*8k"@L,-`*<0I!PVE$HcL?l;q.Srg/X^/8`L%=`DJm6Fh`EOWB`LL/regJr1=.%OlVS=K2J5in[ZcGMqa^i6`#JdjqI,fp-[m%c4j=I+I_0VW<tkO4/aX:rhE5N(\S9Xom<-2H."=\PhW+t$DSElf8j`Y+;CSX<'IgF*ZQ7f2o?1]dF-*sjK2Mg.RN'M+AKR*26L79%d'"h#f;.W^U,lY\S5Y^/c"ZR2,N0)OQiQm,SKG/uLI@$ue4a./5NTk2p>mgfLSFR]mIH8.K-^@kQs]a4J(VoJ3q&HSlb[A\$(#j2%MiIn`<^HZB\Vq5LX5kN0PK:#,W!@9\JQ2m,WF_XS[GS`kOTHTN\k4:rbP=s"^3$i3C#SlpB\ANrc8O6rdIVUmk2GX?9^[E5o'cij%O4D\@Q[9IX#(`SBa\d9B?@)iW?ffE)2;0Ej+m8UAnH_B6Y/b-,KQ#0ArIbo]@.aUjWPR8#Y*=j-,7HBdA`2%BlsQ4(;l+64.BkFk%(FoH,V3*C_1>_J^*Xfn-!acI1>VnO.pnq'D)9nuso)h3^WBqo^9BA"0Sl*P/o?H/Ap+B8jB4p\m&b-?gc9qJF>J-M!E_!:/iR<M)%5@(h"bs"5+'3<-XkiZ1Kn4BU1roBI@S<i=!`iq(VK=h6?]iBP,?-P)H%L3I%GE)u?LJL?.Iqm(=7V8+.4M8j4*dDp@X`SdV<hp)P%]6lV/\-?@TM:@V7*WC_8AD[M'YT_DG4]O;ubh*6VA(BZ\+7KIDqa0S$n$5g-o4!172UCjX=2:a-=4kNkp*<5Egd!P"Hpo/1IZ4ba%^C6t59Y4)bq4CN(^\/(Cf8;,W$6nqGNPVO5<O@M&fS.t%G@aQ]aK5BUeV%X>lC=\"dTgMTI;o.jrGm+/pGeL8/1!p]2-Jdc]R!b0%\\A&hrSMOqVuHS2p#Fe3H*1-HdTg"_o[\0bl0<RI:G[=,Rip$HanDhtb+:kH+^6mKkJ$h=Du$,M,99g?oC$jh;5^jh80n9c<0EZO%,<M=nGm?R)h\8LRS$].kTiq!k'ZDS;=ZA/XN[fbSeL0t#.UDk'+gf8li32=9\(5=6p1r4D<k]AOT8p9sm?\nb;X8#hnE]@[ICW.>%?9l$'Y$n.%KY1.TA/0>.WhU&eq/<0J)#X+1OP;BOiVTb;T;?(lY3o-:+\6b+ADqP&7l&[Lg*d$!r28rYX_&0\kNpAj%gTe8J+u<$%cJnDg5-cF]IW[UgSibPV($X$:l[>':g!C9'7fJY8<_V5o/<X1f7H_[RlVSfD9r_CN4[@Fq3aLl4PdA6K&s,boQ5=5uM+CsRX$ttP%6#;/5jo-Ad*b8;d/JF`2WT=7HI4@FmZg.,0;jb@K+9A#SB)nK>$2J\'1$6cq6Kjr\Ncpj:Sr0kLS[F'=RHQfWNlk,#8GPC`20S[=%/>\2G's@&l!UUZJb9N9d0jeaOZ*hKW4;DK0'/"9udH`.lR\bu5/D_l\p#kD3M`%#X<O2Aq.]]_b*6BQ%NPYh=IL:F\aDF=T75tPJ%`0U,f<i6dbg,SQqM[8rc8&nqT\6K%E>]Z=>rsM8'r^d$Z4Oj,7)J9sY](7P@ZUq_R`2ckUh=u.u+tt+Y?-gqpm2tXSqFMOugT=*%%U3U-.W@qOL("*D\=Epl9Wqd-hpA1HTq<GX&1Nq4"4"-_;5Gd,l)k6/Qbi!'1<dHR5NODga\ocGKXEFg*%Xup>7e0I,HSKkh(_9Y+%o'5k4.Za!]m4?W7QdWiS0%C[QOi\@UQ3VC8%rTB%L1HCiX+W7>j:>`(,XNKMf5_<Hh',uW?7?Jb,r[c?C*`R?$8;SN;#q#tO^E9@%;@SFVcYUZf5)EC_i*CK-j8]^Of_!s`>3hG$#qjnSdHmjiXan+B<f[!ZYZ/]2q3]5p"TEq-<+7$a"$bCrR!&+U^'VUK1/Y%XG1TNK%L@s5nI='#^aDD7MG.rC)_\UmO6U/1gi1DqCYCgotNC(E2l/`;$CI@U?,AkQ3oW-H[c;5<\[St\eo`s_2p"4S9=anMNGsR6Q[o1jh%qCJqeQ*bt<]%@/>N6fUFA%opokV!?ed4!Bp8-e_N5t;\IBp?b;Hbnhhd:hmUao4cN>9tYK\"SM8[N3)Hm^=3YY'a!;YNP!)4):6+%#Wn2[13/YVLHX/E-]&(OjoBo-9Rg4alu*2O7i;?Ad/3XE63%?&rb&\54aR4m-+=4G&<OQr7"34Q=,mMPND2N:HsK]mq]=V`i#UD,%?,hYK@LqjEDk_.0'9;5%ZT+ElGK(,U:SfuApo+^$H$E$FM**VC3PY<@kiT5^*KQT;"hi^D,b0aUT\Ssu8\cF.`$p5aLf8824nC,$%WN<ZGSV0rgH-Rd'/%Ljoj10@]J^BhrVI66Js2_)\$Z_na&dlo0Y_SB5?qV\=_MBYVija+!^F.hd!!K@9*\TL:0P2E.P]u!:`bo<F%S13Zn'L2QMk>OX%a3[$.Pp*:`c5-4<QK8]_.C]c:_6<1sa:=#Dmc,p+mk`FO!Bj'kIqPZ>&I>shj2V.tEr9_.PgfH-V@mi3enUZ=%20rF\`#)TO]&547bGC#aMKNlAP=PpLa!,YW7_c<W]#UF[9)8F`S%(J3m39%Bq^jlMKd"`dJR]P),8-uLRHWc'+*Jff@Ang,\_p[e%`[f$Y\A2RI]F4CW+Br:kVe2;jjVpQR/F&b?>qSim2@+sCRYO9\1t*u!YK<Suf2%rTK6LaOc5sa!^P1u7NSbUsh<HZHSMB.\3h)_!%=8"gh5MTc/hQ!oS(9!7+O+j,AP4NCNI@a"*[qY#+o5Bc5N[m@mrruo01A#?iQ&j%JX(RK9$`h]TYL,4Rnq]FEp;E0CC?*A(;D$!c%#@6`!\6fh.1+f.Z%H4n2c/hETJTKmLUW@H4e&aM5D[c-"rk)C$lGWE)bJj!MM&^dliT_B,85t?Mft*^921b6dYLo>1F8+f@$3mD5%5hpa/KWd15J!-l#%#W8[JuSp,J9IrUGO-VXl/)*.5`pt=[WF;um=J:dXY3WE+7]>\YK\9+D7/G<pI4BfYgYD;HK%C`r5jD/9QV5J%M%1A`A"q]h9m"/[Y+6Y,?7GVLG`#;gNZ-3FXOstRG-$a/U@f,>O^igp.M?.pab)u=%<0I06Z1">4%_C!<IIs8)iapDm4P^^^g8QJ%Yp$kR4_J_\iJuPB;>VP`.cFHsh6FRf3`Tms%;H%lL4#jD/82P1^(s*ER[AmRXT(<280g\"[rb\%&UOqH<f1#;NN56=<QB2@3h6:U%Qf*N$QR=1AI[@U6kW<cYHGWIXo1>\t[$MhiRgi#PE7QBEIoLHp.N_6pT-IdR.HejQUWYbt`?/:Xo@ttn96X?gU]#FbOX-V`Gm*4>%HC!KbT"pu9n#/]8Oe#:*BMCaq61h%CXDD1[[<49dXUt`GLa;C=\b5@!'0h*/iKag@]>b8#5`Vcm/mD\3p5l%&)Kcr&g#k;^=[L/D%"Z3i$I$]!Z8+,+>\+c:*WeUWnj#A0EUkuCp&-)87QOG!F-'rd8*XqaHNY3s.j:b!-X3C^rbalCQhG^bOLN#hfl-O([E8Br<e_cOX%4843XEf>d4XoP:J1*T.8&RZHQk3HhV6li;Q0AY3)ho(16U4ZeP\!gDkUsKa!epb7EXal7-$<k/K^V+,/O#?m;EIE3.fXppNl^*8e%8,ne25Q#<NF0]9".Cp!rFDU>M-IUu/3B8nIHVC6\9(eO[em8=Cmcj9$jaZF8fQ=@NgL"a@Q07A=B5m7d>T-'VS\`kG;[,sWB/%3/%KJZbcru_/?,5VlMmNn['XQl)S:FsYO-F")IDQ,UsU8:Mk2>$><p-H_.IJj\(=bj2qk*2U9)<T_(c,nDhk1oK`1j=WagImpRS>If*%eZb%DLP-i:77EMY\#l"lK%Hru<`Em[J8gLs`i`0TUF7SJCRd;3NGK=U>Oc%;gXnBhC)8IP(ZI;I)nX+OMl(*E=0NJ<4hFMPY\7-r%U<id>^fq!"Vb:W!P:c;[hBZ@&g31jtD,\*kBbRXJCq44MQKP5BRrFp7WC>!pAaqgZc21O>;:/rZ2fU4t2CroHOYd6V_ah43;MP1)%%DgZQ1N29aA+-pY9Nf8-VCSNt)]]\h[1&UJ/h=@WA$;>uasmn:K^C+#fY7iA9S4'ZENV1L.]SX7B>p+/-NtQfBj+BA@I7%=.[l*&%_?2Y)Q:J6S%5+t5bG9cXgQ"IZ$aSG3f^(AR6dp%8'J^.X4Z4/`D_k(3\cbs).F9<`ZXRTYZt/rhUcJs5GU)tdZS#Jb4_h8LFQ9at%LZ*)F)sfCQLAg+RA6MF@KL=]^NOQ]OcB+QsgfNGt%D?"&EC8lV*_bB<g9;mnQ#VfJgr"LX(*55*Kej%!kI(g$md4GDW`h5ZTKF]_%`I`4UP6`PQdPSG8-aXaF0NFuGiV2oO5sTqp'M@^ce](l%M[dR%OJ:EEWH"EnQDJ9a_6>4'G,thqVSbT0]+6?\ZNF3%/jfS'1CU*n%;OW;$:IA<caBDHl@HMkB'hF4>B2!lA;V3.f4##Aj]GhD(#tNGg_Z3;>Y[Pm:*T%t$7)bEZ_BJ5+*NV>MhU71QRRQ&</`A2799Q2#%VhI>GmrR3AU'?BecL&`XM_Jo9H+X=KF%57tjh)&kC$>M7%m$hM!ZOq%aBQQJdPTa]P$YLi)-7ifSn-j+kA>j%HZ=8.WWG6q2Q;:`%`E)4ci_><p[e5;374T9++`$MZ]PS5,T=Y>N$[/F;frJl@n4raU;fu2jUbmg;.(Cj.qB9hP6*DV@@N!Ir,a71*Csml/BSp>aTc*>.%)i"W%MJPhtq^*>;J)BKZ6\ELEFh$>7q0^RJ32hM\W^(-;h80pE\dUE`%,:jJjL!;4@j?O9Y*+^/mHM`,iQoF=S2QaYbLYk3Soh;P%R^+P.O14&]j.gXtEo2WG2"Z6=h\hC?!5f$;V3?>*d6fPhf*+45O_M9)7):uHD1d@cahC^?U+PF%Qpm\GF;e0;o!7Ykon55+"mSjM%Rr^)u)@ZB&DE:M?9S5U=+tTXd;g8QB"I<-)GPZ!)#>iDemqJe@C^I-Eo$2Eh!Q<0Y_iipn*FOL,7$)?sGL&uA#iCYpj(dS[aRbP(%4pZ!j5u[rSNGPqD!t#*W%9mq#"Ip7[!A^;_'uoHD-!@Hn,[9KSC#RBjqqO*f?b1hBaa:<)5^8m@>OZoc<6eM3g[LehhN."_GD>LZ%bilY?lrXJAV<Em2i2l7/gH'2(J9u8t.(0Fhi,7mN2[N#UAQV-h'lI5OBS67uab6S(p[YaY5_&4!;`#.j142nDK7GN[#aWVpUhUN6%#G@e"Z[h?PRf]`"gjPJWB@W.b2Q+I,T<mGgND9N@2bSa^A-&HjKj>L7'Y`sI"&IG:nUrPYn-2uY1*4sMra],PY]p;POT?]ak7+X'%/=gf+pDQ;nkZR1m_Ai8[n0["fZ(9$aYtVT'q3-%*gr'EW>f$]k]C<NBfk4hNJQe2l$#^%RRdb+AV"aKe!Ab9Bntq!,/jdll@i-*i%Z7m\`c4fVHJC_B0kI,nO#;f[4gR$a9Rg)5C$2bHUPE+R+LJ=o0#77(c=\^!R&rJ4YLJ9,7<.UO]egMbnM(p<10N!'TJ21Xj2-&Td%T=d+!FN3hk*ZA`<4qU*_A0eEGi9q1CP=.D7D#C#ZL_`Hmd08&Km,nhfjq=LFc8G(uo^-lV:'5hUmOm@,!<Rm0bWA)s;AL@m)t6.0%0YGLJ0(!35NQ;<V4UufKFrn1!Af?-+aXc"_6=kb6%Hr<^&Cr]-haX<.7>E,jV_Kc_0ERnn+S2OL>L./-pSW'_D]/cNk&*!e#;(pC%+B-/a7)EAJ5lN4a!`"8F`;ob<&5h']BhSokBdR>]Q:0U=LMTioa2o&;$[RdBHU\dU>/Z!e.%$i-E!0YN<25R5?qi>u":D1`o+h[R%5b][+J6uhY2OjtRIoE%+`jl<+$fNm:0>)j#$#XdP<6"?N0<bO-8*!J*%JV2,)Wr%%'mMD2GG;GQc7Z>t3=AqLK;Ji7__>[^k_':W%0I#%FSYj6mNF]XE>L<Jp&Xo^4,,&*ml`05,p"Ul*3GjUFIf)[l1`5XR@$QIa-oP3j);gCQ?$+gT`$JG877G]/#`J"SLA.-S;dipc%j.rEr7`i2,7!ZQuMF@1X.SPY%!&pM1&IoLW0;AKN/-$>A)3&IK*CM)_0MOif8N.mii88I/XU+QREUZ]k[K0YW.qeq:Z17`0-m=0f%,E/8&^eOldeA0<P>bt7SLYJ$I_Of@T\8<SXVguQC*PmRXJs6'khL`A)&'DH*)*%(ukj?IBj(oCj/SFJh<Dt.ihJh2%C)c"f#e64!%4+LB>Ba$E@"B-M.TVe*con54@'d67)jnJ>S5sTqf*e`QE<"=G7i#%PEQN3psp]23P?$4CpF[/OhL`OQ)+pDO!Q&4ZN>m^;K_'k3#%6t4,:f*uaOq$r??(>f=L@E8Yha["QS])R<G&:#,3EdGZ\88hTsgL0g-Sk)rP(itrn-S,OUD5,Bt#RbPh"PcTFdpt`AW!tP5'kgSA%KDhbeRcV!NKJn?b>fq*Tj_]X#rnO?8'h'Dg`.4u8aGV;GW?Fl^i#As6Ec#Zr.nB$1a<lJT$4IJY&4XHZ3)X:m_i]REZD`)/2OIq*%6q)M@LI!d?6CUC9pkVqKMSM%t(;]N66qbC$&CCIc[SVd$Xo^#hhNIWo[]nrf'1/0W2(icBn3OBtiGkrMi[6c6eg(ZnFYir9KXeP@%Cf:cp^,!nVfr1nP;b+2tLo_9uAO502#e65f5SQ(5GWQ'GW_VNa"nF'nF5GC[RXg7dB/k,+[_Zp$,%Zn!`"I]SD<V2FR&J.r!!@U?%-IrBZ.fp-ZKaQO`R\\AuP7bH+@7:8qJ]t^"j,DFb#I@*gMnh*YK]pjM8>G]l5`h$5M84[U<#6ge8Q8a+Tb2Q:7\l$4+SQ%a9:m&E%W"+Zn_7bdXnXbCLp,p"6Bk'iXkt+/P/rS%s>5AP<<:3cSaB;<Vmmjbb37Ys;#&KJ0iYlbP'fWLoWR)U#4tmD%(a3#1+Q-##"5sYb%649/Rehr@:-V+Fs:jT%A-aWnEAm-MT?J[RGkYI9Z'u7f,^8[KsBbM1l8M[^K\:u&t3eTIqUEPqXjpR\j'N,erck$Fa6t?@0TMbTM%C/`c]W=hK+K'4%g0YT[U3/-9^*!`/W%q;##JE*/3&6+K9/W&cGL%.f@)mAK7o*ADh</^#7jL2;UiI/@5#24h@_<jg+VH`e?]ER_E%7cdn:N83Z3kl&RDKUF0q/)1igcD[H#JKcJ)A;6X3fOm*N]"Dl6Hn2Th.4A\@Ll>$="&Y<ndZiM;'A=.cX4R0<]O`eHQTtTe_]UE1%^t]93gO[dd[_[b0XKk69"C,^be!1FjJMI>8+=V?%+IAroSKP!9!B[fc.](l0$&gb\57b3XJLIHfIh:@FWa=+!SOqHV#f/7G#^`?3%:u6f"b[bHehM/$8C?+58#qbLhrIiN%,_qOXh@oB@+r%W7j"3e'q5E)LS<:.LL>S&r@H>P?i>naR76hVcmXn>)N_5A20$pQc1^sM(%m>4jIZHI*B!t?I7R;Q6TD$-pGS!W)!DH5V3K7Nq(qkpO<A49Ki2n37n_\"-I"\rnSPuTO6P7]OeRh=C:=`q*@8:]i!R&28Km<)CI%kG<Nh&&>g?ADH(PhBm7qp2JSnR+)ZkCWKq7>bYnf8j")tKq]<#kefJ1PQa,"^sR<dJBtlX\.l]o8OEZGEuXIDfckSjehqB]Y1_j+%CRd-N?MlI-qb#GeCi'ejL.+O$)9$bE=,';c:mb<d>YDPBVeIi4@up6d^f-SuH:]l&dMi0^8QVFZT%aC]&L"aKhT2/j_gUJGIacLG%kj(',L*\<XrWCAs0UJ]p/fq1I*j;aHRstD.p@Ro?r4=^c_Y`VZDg*"M]8P:Qa'4^"+[Q$_XqJ`Z3\u!L*PN^0f85@qNf`k78%o^G%TBP@cp#&I:gH`9PQh[!DSp3rq->]SUU=t7E9"6Km*`\p2&brUs`D##C"[.Y8?ZI8o=/TI/rrXuLP5-:l?Xe]_pI%q,LS$>J0`D5S%V^OU1CrG#(6Jq*[\9TKYPF].Rd&&fmEq`nb0p3(ApTI[OMpO*(E/m[se4)"\@lERl.=^8raXU1!icCelV;DA@H">'g[[tjC\n&gk%=*<cO:k-C/S7Kpps(&,P(aEU(n;qH9V*YhOHP'Pio52o=Vu;I!c=WY4[SBPXBMt&-9g,u-E3+uCNJ:qK*9uisY\_2m5mKMUkfuH#%jI3/22Hc"ic6laTr=</DR89[:S:uXI+D,=jU5H.r\%M59:)rQ_M#CU[CoYHD!RbF0EP/D$[,L>?_u[rmQa[D*qYM'[(,:CP[i*"o%Ub[]IOPZD;-'`1@.HIp3[e7m0E!7U,^\+5C["`\rW)ulaPn6sMVJSa][It]Pk,9c,[O9b*n+Ddhd7bm^l@HG;gbsP0Q+93NH_%T2%5_&=-QUgMHC;cAFF\t\>SYc[e`rtDU^MLTFS^>&akhOWn2^I[FijAB32?9mr^"ds[gE<0(l0*^]J\^tt7i6h7NZ'Tm>pXY&SJuYu%hJ%J6fS$Dl`)MJ?eBH<>2`-CsGZ2q*11eM$_RYl>%0CjFEhE;%;U\#9T0QZWZN`So>5to54onjdZN`So8Godur[4DWM$?-E7/N_`%Y5CkkjbX3@-fKc9#!N(6rj)h.n&dYUIojppr(3E"Jmh/\58-.'1i!S[pePCqNF^a4#.o/sMpmYT^#+<hfR%qV^e6g6s1ZTD4"Rrb%bLEZG:c4O7huQq+!eY5,W2N&'A*/EA:q>L.U$F$_GKCbXJQ\orcqUm:k\a>FD,N&'OZ5\;GOi1.5]:=>S7!D51YerL_45M?$-Q?X%9:,m\adiV-\s?(0(2(Ht)[,dki@IC[hG^r<\t_11hQ=oZ*:P:`%WlqS<Dkr#^tT%o]hLBiC31R0/K33r\e^a\/FiD(-K-)7,gP09%qG,cfTXP575<><j&t%pd(<.@ERc_8qiAUA!-CO'--/J1`]PS5,gOq4%*Kj+X$g!Bf1DAuj`o1`XhB\Tk<@o,tWHq;>D]8iO2W62T%a#?pW,WasTVg3M%nK9ecmOY#t\g#n#KAa*G!d^>T(8?F-lCLBWT;]Pe<2(hj<F*)I.2d5kS--8>-c8Rc0a(c[<*PjqhBYbrL?"bp%.A/8FJ=\*XJEWYARZL!i];m2"80iu'8K`e%$qCgVOWs;'5sT?%:-s'Qa&MSP_Rh531-IbIBl[k&ZDdB/0F>C+&CB$^EtDW86DLDX%746f!pn(8ic=E^P/.3!sQ4A_>G$bE-XaA+iDfKF*Yc*2]0E\t%0\k-1'/1FdN#Df]*afl[XsS/mVb,eR2XGbB8fk.NgBI\l9fNGX%@RF6(;^_3D6"a?kVP[sn!\//A''Xu:E(5uj_ZL?NM_G5MYq2<KB*NV8@(<D^-:"%1(e.6Jj.9QZekK(36GQb-C8`l=+H[T5[_Zoi%'@+C8fMJF5H^c.?+d,EfgMIg2SD0ikd"jFIH;Okt9`cAt=J14E7osI!]q6DZ/jN3W$i83mP&S!O)q\ZY*o<\)Z-8_Z3l-b0-BN!*%3P;&XE/*@W_["A3)1!HJ_o67kQ:2EIW44hR/`D#RWTQ1-(3LJZ\Ms)V_/NbkE&^h7KVp:N^]kif_]?<T@WbAU%kNs#%Fo;6%,X&'%2Md6R-[8$Y#WfdHU>idkKB?NW5@0I'M1n8?Q.idY^&IkKEAtCV8_h$dr4hR.MoS?;TNj_!06=TUf<=\FlabW>:]H,#E!sECQ"k6@%-N66r<4sg~>%AI9_PrivateDataEnd